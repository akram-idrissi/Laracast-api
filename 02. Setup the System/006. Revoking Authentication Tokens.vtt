WEBVTT

00:00:00.000 --> 00:00:04.000
Let's take a look at the database so

00:00:04.000 --> 00:00:12.000
that we can look at the token that we created in the previous episode.

00:00:12.000 --> 00:00:18.000
So we used the user with an email of jcoss at example.com.

00:00:18.000 --> 00:00:20.000
It has an ID of one.

00:00:20.000 --> 00:00:23.000
And if we look at the personal access tokens,

00:00:23.000 --> 00:00:25.000
we can see that there is one record.

00:00:25.000 --> 00:00:28.000
The tokenable ID has a value of one.

00:00:28.000 --> 00:00:33.000
This is the relationship between our tokens table and the users table.

00:00:33.000 --> 00:00:37.000
So this means that this is a token for the user with an ID of one.

00:00:37.000 --> 00:00:41.000
We have the name, the token, abilities, last used at,

00:00:41.000 --> 00:00:44.000
and then we have the expires column.

00:00:44.000 --> 00:00:46.000
Now notice that it is null.

00:00:46.000 --> 00:00:52.000
And by default, any token that we create with Sanctum never expires.

00:00:52.000 --> 00:00:56.000
And we can go back and forth as to whether or not that's a good idea.

00:00:56.000 --> 00:01:00.000
But there are some times when you want a token to never expire.

00:01:00.000 --> 00:01:03.000
There are other times when you want tokens to expire.

00:01:03.000 --> 00:01:08.000
We're not going to hash that out because it's really done on a case-by-case basis.

00:01:08.000 --> 00:01:10.000
What we do want to do, however,

00:01:10.000 --> 00:01:15.000
is revoke a token that is essentially going to sign the user out.

00:01:15.000 --> 00:01:19.000
And, well, we'll just implement that functionality.

00:01:19.000 --> 00:01:22.000
So let's go to our auth controller.

00:01:22.000 --> 00:01:26.000
And we are going to add a method called logout.

00:01:26.000 --> 00:01:28.000
We need the request.

00:01:28.000 --> 00:01:32.000
And there are three different ways that we can revoke a token.

00:01:32.000 --> 00:01:37.000
The first is to use a method called tokens.

00:01:37.000 --> 00:01:42.000
This is a gateway to, well, all of the tokens for the given user.

00:01:42.000 --> 00:01:44.000
And we can call simply delete.

00:01:44.000 --> 00:01:48.000
And that is going to delete all of the tokens for that user.

00:01:48.000 --> 00:01:52.000
Now, for signing out, we don't want to take this approach

00:01:52.000 --> 00:01:56.000
because what if the user has a token that doesn't expire?

00:01:56.000 --> 00:02:00.000
It might be for a service or some kind of agent application.

00:02:00.000 --> 00:02:05.000
If we delete that token, we've essentially broken their stuff.

00:02:05.000 --> 00:02:07.000
And they're not going to be happy with us.

00:02:07.000 --> 00:02:11.000
So this is not a good option for this case.

00:02:11.000 --> 00:02:16.000
Now, we could provide the ability for a user to revoke all of their tokens

00:02:16.000 --> 00:02:18.000
if they wanted to do that.

00:02:18.000 --> 00:02:21.000
There are some very good reasons why we would want to do that.

00:02:21.000 --> 00:02:26.000
But for our purpose in this case, no, we don't want this.

00:02:26.000 --> 00:02:33.000
Now, similarly, there's the ability to delete a token based upon its ID.

00:02:33.000 --> 00:02:37.000
So we would use the tokens method, call where,

00:02:37.000 --> 00:02:39.000
and then if we had the ID of a token,

00:02:39.000 --> 00:02:43.000
we could use that and then simply delete it.

00:02:43.000 --> 00:02:49.000
And that's okay, except for our case, we don't necessarily have that ID.

00:02:49.000 --> 00:02:54.000
We do, however, have the ability to get the current access token

00:02:54.000 --> 00:02:57.000
that was used to authenticate this request.

00:02:57.000 --> 00:03:02.000
And in that case, yes, we definitely want to delete that token.

00:03:02.000 --> 00:03:06.000
So this is how we are going to sign the user out.

00:03:06.000 --> 00:03:10.000
We will call current access token, we will delete that,

00:03:10.000 --> 00:03:13.000
and then that revokes that token.

00:03:13.000 --> 00:03:16.000
But we do need to return something here.

00:03:16.000 --> 00:03:19.000
So let's just say okay.

00:03:19.000 --> 00:03:23.000
And I don't necessarily think we need a message.

00:03:23.000 --> 00:03:26.000
But if we ever decide that we do, then we can add one.

00:03:26.000 --> 00:03:31.000
Although, oh, we added the ability to pass in data, didn't we?

00:03:31.000 --> 00:03:33.000
And we need to do something.

00:03:33.000 --> 00:03:35.000
But in this case, we don't need that.

00:03:35.000 --> 00:03:39.000
So let's go to our API responses trait.

00:03:39.000 --> 00:03:42.000
And let's just have a default value for data.

00:03:42.000 --> 00:03:45.000
We'll just set that to an array.

00:03:45.000 --> 00:03:48.000
We might want to do something different like use null.

00:03:48.000 --> 00:03:51.000
But for this, it should be okay.

00:03:51.000 --> 00:03:53.000
If we ever need to change it, we can.

00:03:53.000 --> 00:03:56.000
Okay, so that should log the user out.

00:03:56.000 --> 00:03:58.000
We need to set up a route for this.

00:03:58.000 --> 00:04:01.000
So let's go to our API file.

00:04:01.000 --> 00:04:06.000
And we want to use the auth sanctum middleware.

00:04:06.000 --> 00:04:09.000
Because if the user isn't authenticated,

00:04:09.000 --> 00:04:13.000
there really is no reason for them to be hitting this endpoint.

00:04:13.000 --> 00:04:16.000
So we want to be sure that the user is authenticated

00:04:16.000 --> 00:04:19.000
with our auth sanctum middleware.

00:04:19.000 --> 00:04:25.000
Then let's make this a POST request for the logout endpoint.

00:04:25.000 --> 00:04:31.000
We need to call the logout method on our auth controller.

00:04:31.000 --> 00:04:34.000
And that should be that.

00:04:34.000 --> 00:04:36.000
So now we just need to make that request.

00:04:36.000 --> 00:04:37.000
Let's go to Postman.

00:04:37.000 --> 00:04:43.000
Under authentication, let's create a new request.

00:04:43.000 --> 00:04:47.000
Let's rename it to logout request.

00:04:47.000 --> 00:04:51.000
And we need to change this to a POST request.

00:04:51.000 --> 00:04:56.000
The URL is for the logout endpoint.

00:04:56.000 --> 00:05:01.000
We do need to set the authorization header for our bearer token.

00:05:01.000 --> 00:05:04.000
And hey, it automatically imported that value.

00:05:04.000 --> 00:05:05.000
So that's great.

00:05:05.000 --> 00:05:08.000
And this gives us the option to set as a variable.

00:05:08.000 --> 00:05:09.000
So let's do that.

00:05:09.000 --> 00:05:14.000
That way we don't have to go to all of our other requests

00:05:14.000 --> 00:05:16.000
to change the token.

00:05:16.000 --> 00:05:20.000
So let's just call this bearer for the lack of a better word.

00:05:20.000 --> 00:05:23.000
And let's use the global scope.

00:05:23.000 --> 00:05:25.000
That's going to set that variable.

00:05:25.000 --> 00:05:30.000
So we now have this bearer variable that we could use every place else.

00:05:30.000 --> 00:05:36.000
And let's set the accept header to application slash JSON.

00:05:36.000 --> 00:05:38.000
So that should be everything.

00:05:38.000 --> 00:05:40.000
I think we're ready to go.

00:05:40.000 --> 00:05:41.000
So let's save it.

00:05:41.000 --> 00:05:42.000
Let's send it.

00:05:42.000 --> 00:05:44.000
We should get a response.

00:05:44.000 --> 00:05:45.000
And great.

00:05:45.000 --> 00:05:48.000
There's no message, but we get that status of 200.

00:05:48.000 --> 00:05:50.000
So that's perfect.

00:05:50.000 --> 00:05:52.000
Let's take a look at the database.

00:05:52.000 --> 00:05:54.000
And let's refresh this.

00:05:54.000 --> 00:05:58.000
And sure enough, that token is now gone.

00:05:58.000 --> 00:06:02.000
So if we try to make a request for our tickets,

00:06:02.000 --> 00:06:07.000
let's change our token here to use our bearer variable.

00:06:07.000 --> 00:06:11.000
If we send this, it should say unauthenticated.

00:06:11.000 --> 00:06:13.000
So that's perfect.

00:06:13.000 --> 00:06:14.000
Everything is great.

00:06:14.000 --> 00:06:17.000
Now let's talk about expiration,

00:06:17.000 --> 00:06:21.000
because I think it would be a good idea for our tokens to expire

00:06:21.000 --> 00:06:23.000
after a certain time.

00:06:24.000 --> 00:06:28.000
So whenever we create our token and we give it a name,

00:06:28.000 --> 00:06:32.000
we can also give it the abilities that that token will have.

00:06:32.000 --> 00:06:36.000
And then we can also set the expiration point.

00:06:36.000 --> 00:06:38.000
So let's do this.

00:06:38.000 --> 00:06:42.000
We will set the abilities to be all for the time being.

00:06:42.000 --> 00:06:45.000
We will eventually have our own abilities here.

00:06:45.000 --> 00:06:50.000
But then we will set an expiration of, let's say, a month.

00:06:50.000 --> 00:06:53.000
That's probably a little bit too long for this case.

00:06:53.000 --> 00:07:00.000
But the idea here is that clients are going to be hitting this login end point.

00:07:00.000 --> 00:07:05.000
So for a client, we would want some kind of expiration.

00:07:05.000 --> 00:07:07.000
I would probably prefer a day.

00:07:07.000 --> 00:07:09.000
If that, maybe 30 minutes,

00:07:09.000 --> 00:07:12.000
depending upon what kind of application this was.

00:07:12.000 --> 00:07:16.000
But for our purposes, we don't want to have to keep signing in and everything.

00:07:16.000 --> 00:07:19.000
So we'll just stick it to a month.

00:07:19.000 --> 00:07:22.000
So that we can go back to Postman.

00:07:22.000 --> 00:07:24.000
We can log in.

00:07:24.000 --> 00:07:26.000
So let's send that request.

00:07:26.000 --> 00:07:28.000
That's going to give us a new token.

00:07:28.000 --> 00:07:31.000
But we need to update our bearer variable.

00:07:31.000 --> 00:07:34.000
So let's go to Environments, Globals.

00:07:34.000 --> 00:07:36.000
And then we have Bearer there.

00:07:36.000 --> 00:07:42.000
We can set the initial value and the current value to our new value.

00:07:42.000 --> 00:07:43.000
Let's save that.

00:07:43.000 --> 00:07:45.000
Go back to Collections.

00:07:45.000 --> 00:07:49.000
Let's get our tickets to make sure that that works.

00:07:49.000 --> 00:07:50.000
Sure enough, it does.

00:07:50.000 --> 00:07:52.000
Let's take a look at the database.

00:07:52.000 --> 00:07:58.000
Whenever we refresh, we now see that we have this expires at column with a value.

00:07:58.000 --> 00:08:00.000
So that's perfect.

00:08:00.000 --> 00:08:03.000
And if we wanted to set a default,

00:08:03.000 --> 00:08:07.000
we could go to our sanctum configuration file.

00:08:07.000 --> 00:08:10.000
That is sanctum.php.

00:08:10.000 --> 00:08:16.000
And down kind of halfway in the file, there's this expiration.

00:08:16.000 --> 00:08:20.000
Now, it's important to read here because it says that this will override

00:08:20.000 --> 00:08:26.000
any values set in the tokens expires at attribute.

00:08:26.000 --> 00:08:30.000
But whatever value we set, it, of course, needs to be numeric.

00:08:30.000 --> 00:08:34.000
It is the number of minutes for the expiration.

00:08:34.000 --> 00:08:39.000
So if we wanted to set it to 30 minutes, then we would just use 30.

00:08:39.000 --> 00:08:43.000
If we wanted an hour, that would, of course, be 60.

00:08:43.000 --> 00:08:49.000
If we wanted a day, we could multiply that by 24 and then by 30 for 30 days.

00:08:49.000 --> 00:08:53.000
But once again, this will override any values.

00:08:53.000 --> 00:08:57.000
And so now that we have the ability to both sign in and sign out,

00:08:57.000 --> 00:09:01.000
let's start focusing on working with our data.

