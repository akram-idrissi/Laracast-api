WEBVTT

00:00:00.000 --> 00:00:05.000
One of the most important things that we can do when creating an API

00:00:05.000 --> 00:00:07.000
is designing the payload.

00:00:07.000 --> 00:00:11.000
That's what I'm going to refer to our response as,

00:00:11.000 --> 00:00:13.000
because that's what it is.

00:00:13.000 --> 00:00:14.000
It's our payload.

00:00:14.000 --> 00:00:17.000
And this is important, of course, because this is an API.

00:00:17.000 --> 00:00:20.000
Clients are coming to our API to get to our data,

00:00:20.000 --> 00:00:23.000
so it needs to be structured very well.

00:00:23.000 --> 00:00:26.000
It also needs to be at least something that we can do

00:00:26.000 --> 00:00:28.000
that works very well.

00:00:28.000 --> 00:00:33.000
It also needs to be at least something that the client expects.

00:00:33.000 --> 00:00:37.000
Like, for example, JSON, which we are returning a JSON structure,

00:00:37.000 --> 00:00:39.000
but there's a couple of issues here.

00:00:39.000 --> 00:00:41.000
First of all, we are just taking our model

00:00:41.000 --> 00:00:43.000
and dumping that into the response.

00:00:43.000 --> 00:00:46.000
And while there's really technically nothing wrong

00:00:46.000 --> 00:00:48.000
with doing that in this case,

00:00:48.000 --> 00:00:52.000
very rarely do we want to just dump our model

00:00:52.000 --> 00:00:55.000
because there could be sensitive information.

00:00:55.000 --> 00:00:59.000
But at the very least, we want to control the structure of it all.

00:00:59.000 --> 00:01:01.000
And then second, of course, this is JSON.

00:01:01.000 --> 00:01:06.000
So the convention in JSON is that property names are camel-cased,

00:01:06.000 --> 00:01:08.000
and that is not the case here.

00:01:08.000 --> 00:01:12.000
So we want to make quite a few changes here.

00:01:12.000 --> 00:01:18.000
Now, there is no standard as far as a JSON payload is concerned.

00:01:18.000 --> 00:01:21.000
So you don't have to adhere to any rules.

00:01:21.000 --> 00:01:25.000
There is a specification if you want to opt in to use it.

00:01:25.000 --> 00:01:26.000
It really doesn't matter.

00:01:26.000 --> 00:01:30.000
You can do whatever you want because it is your API.

00:01:30.000 --> 00:01:34.000
However, this jsonapi.org is a specification

00:01:34.000 --> 00:01:38.000
that many JSON APIs adhere to.

00:01:38.000 --> 00:01:41.000
And in fact, we will see some things in Laravel

00:01:41.000 --> 00:01:44.000
that follow these same ideas.

00:01:44.000 --> 00:01:47.000
So I think this would be a good thing to follow.

00:01:47.000 --> 00:01:50.000
We don't have to adhere to these rules line by line,

00:01:50.000 --> 00:01:55.000
but I think the overall idea is something that we should do.

00:01:55.000 --> 00:01:58.000
So if we take a look at the specification,

00:01:58.000 --> 00:02:01.000
what I want to focus on is the document structure.

00:02:01.000 --> 00:02:06.000
So a document, which would be like an individual object from our model,

00:02:06.000 --> 00:02:08.000
will have a top level of data.

00:02:08.000 --> 00:02:13.000
And then inside of that data would be everything about that particular document.

00:02:13.000 --> 00:02:18.000
So for a ticket, the data would have the links for that ticket.

00:02:18.000 --> 00:02:20.000
If there was any included information,

00:02:20.000 --> 00:02:23.000
like the author or the user information,

00:02:23.000 --> 00:02:25.000
that would be inside of included.

00:02:25.000 --> 00:02:28.000
There's also an attributes somewhere.

00:02:28.000 --> 00:02:32.000
So the attributes are where we would put like the title

00:02:32.000 --> 00:02:35.000
and the description and things like that.

00:02:35.000 --> 00:02:36.000
So then the question becomes,

00:02:36.000 --> 00:02:39.000
how do we take our model and translate it

00:02:39.000 --> 00:02:42.000
into something highly structured like this?

00:02:42.000 --> 00:02:44.000
And the answer is very simple.

00:02:44.000 --> 00:02:46.000
We use a resource.

00:02:46.000 --> 00:02:51.000
So we can use Artisan to make a resource.

00:02:51.000 --> 00:02:54.000
We want to version this because different versions of our API

00:02:54.000 --> 00:02:57.000
would have a different resource.

00:02:57.000 --> 00:03:00.000
And we want to create a ticket resource.

00:03:00.000 --> 00:03:06.000
And this is going to create a class that has a method called toArray.

00:03:06.000 --> 00:03:09.000
And that's where we're going to spend the majority of our time

00:03:09.000 --> 00:03:14.000
because this is where we essentially design the payload that we want.

00:03:14.000 --> 00:03:16.000
And so now that we have this resource,

00:03:16.000 --> 00:03:18.000
let's go to our ticket controller.

00:03:18.000 --> 00:03:21.000
And for the index route, let's do this.

00:03:21.000 --> 00:03:23.000
Instead of just returning our tickets,

00:03:23.000 --> 00:03:26.000
we are going to use our ticket resource.

00:03:26.000 --> 00:03:28.000
It has a static method called collection.

00:03:28.000 --> 00:03:33.000
And we can pass in the collection of our tickets in this particular case.

00:03:33.000 --> 00:03:36.000
And that is going to use the ticket resource

00:03:36.000 --> 00:03:40.000
to translate our ticket model into the JSON structure

00:03:40.000 --> 00:03:43.000
that we are going to design here.

00:03:43.000 --> 00:03:48.000
So if we go to Postman and we make the request for our tickets,

00:03:48.000 --> 00:03:50.000
we're going to see that there's already a change.

00:03:50.000 --> 00:03:53.000
First of all, we have this wrapper called data,

00:03:53.000 --> 00:03:57.000
which that's convenient because, well, we have this data here

00:03:57.000 --> 00:04:00.000
that will contain our other tickets.

00:04:00.000 --> 00:04:02.000
So that's nice.

00:04:02.000 --> 00:04:05.000
And then, of course, we have all of the ticket information

00:04:05.000 --> 00:04:07.000
as it currently was before.

00:04:07.000 --> 00:04:11.000
Now, this data is a wrapper, and we can change that.

00:04:11.000 --> 00:04:14.000
And we'll look at how we can change that in a few moments.

00:04:14.000 --> 00:04:18.000
But for right now, we're going to leave that as data.

00:04:18.000 --> 00:04:21.000
And then inside of our controller, let's go down to the show method.

00:04:21.000 --> 00:04:25.000
And here we will simply new up the ticket resource.

00:04:25.000 --> 00:04:27.000
We'll pass in the ticket,

00:04:27.000 --> 00:04:32.000
and that is going to translate the ticket into our JSON structure.

00:04:32.000 --> 00:04:36.000
So if we wanted to make another request but for an individual ticket,

00:04:36.000 --> 00:04:38.000
well, let's do that.

00:04:38.000 --> 00:04:40.000
Let's add a request.

00:04:40.000 --> 00:04:42.000
We'll call this get ticket.

00:04:42.000 --> 00:04:46.000
The URL is going to be practically the same thing

00:04:46.000 --> 00:04:50.000
except that we want another segment slash one after tickets.

00:04:50.000 --> 00:04:55.000
We do need the authorization header, so let's set that to bearer token.

00:04:55.000 --> 00:05:00.000
We also want to set the accept header to application JSON.

00:05:00.000 --> 00:05:03.000
And with that in place, we should be able to make a request

00:05:03.000 --> 00:05:09.000
for our ticket, and voila, we have our individual ticket data.

00:05:09.000 --> 00:05:11.000
And again, we have this data wrapper.

00:05:11.000 --> 00:05:15.000
So let's take a look at how we could change that if we wanted.

00:05:15.000 --> 00:05:20.000
So inside of our ticket resource, we could have a public static wrap.

00:05:20.000 --> 00:05:22.000
And then we could set this to whatever.

00:05:22.000 --> 00:05:28.000
So if we wanted our wrapper to be ticket, then we could do that.

00:05:28.000 --> 00:05:32.000
And whenever we send the request for the individual ticket,

00:05:32.000 --> 00:05:35.000
we see that the wrapper changed from data to ticket.

00:05:35.000 --> 00:05:36.000
I don't want to do that though.

00:05:36.000 --> 00:05:40.000
I want to adhere to the JSON API specification.

00:05:40.000 --> 00:05:44.000
So we're going to leave that commented out just so that it's in the code,

00:05:44.000 --> 00:05:47.000
but I want our wrapper to be data.

00:05:47.000 --> 00:05:53.000
And then we just need to start organizing our data in this particular format.

00:05:53.000 --> 00:05:56.000
So there's this type property which is required.

00:05:56.000 --> 00:05:59.000
There's this ID that is required as well.

00:05:59.000 --> 00:06:02.000
And so we can start there.

00:06:02.000 --> 00:06:08.000
So all we need to do inside of toArray is return an array of our structure.

00:06:08.000 --> 00:06:10.000
And we'll start with the type.

00:06:10.000 --> 00:06:14.000
So that was ticket in our case.

00:06:14.000 --> 00:06:19.000
Then we would have the ID, which would be, of course, the ticket ID.

00:06:19.000 --> 00:06:22.000
And once again, if we just made a request now,

00:06:22.000 --> 00:06:24.000
we see that our data changes.

00:06:24.000 --> 00:06:28.000
Now we only see the information that is returned from our resource.

00:06:29.000 --> 00:06:32.000
So this is how we can start to omit things

00:06:32.000 --> 00:06:35.000
if we need to omit them from the response.

00:06:35.000 --> 00:06:40.000
And later on, we'll look at how we can conditionally include or omit things.

00:06:40.000 --> 00:06:43.000
But this is it.

00:06:43.000 --> 00:06:45.000
I mean, the concept is very simple.

00:06:45.000 --> 00:06:50.000
We simply define the things that we want inside of our JSON payload,

00:06:50.000 --> 00:06:52.000
and that's going to be it.

00:06:52.000 --> 00:06:55.000
So next, we want attributes.

00:06:55.000 --> 00:06:58.000
This is where we would have all of the other information about the ticket,

00:06:58.000 --> 00:07:01.000
such as the title and the description.

00:07:01.000 --> 00:07:05.000
Although one thing that I think we will discuss later on

00:07:05.000 --> 00:07:08.000
is how we can omit the description.

00:07:08.000 --> 00:07:12.000
Because I don't necessarily think that we need the description

00:07:12.000 --> 00:07:15.000
for the tickets request.

00:07:15.000 --> 00:07:19.000
Because if we are making a request for all of our tickets,

00:07:19.000 --> 00:07:21.000
or at least for a collection of tickets,

00:07:21.000 --> 00:07:25.000
the description isn't necessarily something that the client is going to display.

00:07:25.000 --> 00:07:28.000
Because it could be a sentence, it could be a couple paragraphs,

00:07:28.000 --> 00:07:30.000
it could be a novel.

00:07:30.000 --> 00:07:33.000
So we'll look at how we can omit that later on.

00:07:33.000 --> 00:07:36.000
But for right now, we're going to include the description.

00:07:36.000 --> 00:07:39.000
Then we also need the status,

00:07:39.000 --> 00:07:44.000
and the createdAt and updatedAt values.

00:07:44.000 --> 00:07:48.000
The next thing I want to include is a link for the individual ticket.

00:07:48.000 --> 00:07:51.000
That way, the payload will have the link,

00:07:51.000 --> 00:07:55.000
and the client can then use that link to make whatever request that they need

00:07:55.000 --> 00:07:58.000
for whatever ticket that they need.

00:07:58.000 --> 00:08:03.000
So let's have links as the next property in our JSON structure.

00:08:03.000 --> 00:08:08.000
This will be an array where the first object will be self.

00:08:08.000 --> 00:08:13.000
The idea being that this is the link for this particular ticket.

00:08:14.000 --> 00:08:17.000
And in which case, we want to call route,

00:08:17.000 --> 00:08:21.000
and our route's name will be TicketsShow.

00:08:21.000 --> 00:08:26.000
And then we just need to supply the ticket, which is the ID.

00:08:26.000 --> 00:08:31.000
So with that in place, we should be able to now see much more information.

00:08:31.000 --> 00:08:36.000
We have our data, we have the type as ticket, ID,

00:08:36.000 --> 00:08:41.000
the attributes of the ticket, followed by the link for that particular ticket.

00:08:41.000 --> 00:08:43.000
So we're all good there.

00:08:43.000 --> 00:08:46.000
If we take a look at the collection of tickets,

00:08:46.000 --> 00:08:49.000
we will see essentially the same things,

00:08:49.000 --> 00:08:52.000
except that now we just have a collection of them.

00:08:52.000 --> 00:08:56.000
But something else that I want to do for the collection,

00:08:56.000 --> 00:08:59.000
I don't necessarily want just a straight-up collection.

00:08:59.000 --> 00:09:02.000
I want a paginated collection.

00:09:02.000 --> 00:09:05.000
So instead of calling all, let's call paginate.

00:09:05.000 --> 00:09:12.000
And this is also where we are going to start to see some very JSON API things.

00:09:12.000 --> 00:09:15.000
For example, we, of course, have our data here.

00:09:15.000 --> 00:09:19.000
But there's a links, which is a little bit different,

00:09:19.000 --> 00:09:22.000
at least as far as the structure is concerned.

00:09:22.000 --> 00:09:24.000
Then there is a meta property.

00:09:24.000 --> 00:09:27.000
And that's it.

00:09:27.000 --> 00:09:31.000
So it's not exactly following the JSON API specification.

00:09:31.000 --> 00:09:34.000
Now, there's one other thing that I want to add.

00:09:34.000 --> 00:09:38.000
And if we go back to the JSON API specification,

00:09:38.000 --> 00:09:42.000
we'll see that we can include relationships.

00:09:42.000 --> 00:09:45.000
So here we can see there's this relationships.

00:09:45.000 --> 00:09:48.000
And I don't necessarily know where that is defined.

00:09:48.000 --> 00:09:54.000
Okay, so here's relationships, author, and then the links, and then the data.

00:09:54.000 --> 00:09:59.000
So it's essentially the same kind of structure that we did for the ticket,

00:09:59.000 --> 00:10:03.000
except that it's more specific for the user,

00:10:03.000 --> 00:10:05.000
which that's easy enough to do.

00:10:05.000 --> 00:10:08.000
So let's add the relationships,

00:10:08.000 --> 00:10:13.000
which is going to be an array where we will have the author.

00:10:13.000 --> 00:10:19.000
And the data for the author is what we already have available to us,

00:10:19.000 --> 00:10:22.000
at least as far as the user ID is concerned.

00:10:22.000 --> 00:10:26.000
So the type here is going to be user.

00:10:26.000 --> 00:10:28.000
Then we will have the ID,

00:10:28.000 --> 00:10:32.000
which will come from the user ID attribute from our model.

00:10:32.000 --> 00:10:35.000
We could also include some links here,

00:10:35.000 --> 00:10:39.000
but we don't have a route set up for our users yet.

00:10:39.000 --> 00:10:43.000
So what I want to do then is we'll still have the self,

00:10:43.000 --> 00:10:46.000
but I'm going to add just to do.

00:10:46.000 --> 00:10:50.000
So with that in place, we should be able to go back.

00:10:50.000 --> 00:10:54.000
And whenever we make a request, let's do for the individual ticket.

00:10:54.000 --> 00:10:56.000
We should see the relationships.

00:10:56.000 --> 00:11:00.000
We have the author where the data is of type user,

00:11:00.000 --> 00:11:03.000
the ID is one, and then we have the links,

00:11:03.000 --> 00:11:06.000
which we will implement at a later time.

00:11:06.000 --> 00:11:09.000
So there we have our JSON structure.

00:11:09.000 --> 00:11:11.000
I'm not going to say it's perfect,

00:11:11.000 --> 00:11:14.000
but I think that it's much better than what we had before,

00:11:14.000 --> 00:11:16.000
if a little verbose,

00:11:16.000 --> 00:11:21.000
but it at least provides all of the pertinent information to the client in a

00:11:21.000 --> 00:11:24.000
structured manner. In the next episode,

00:11:24.000 --> 00:11:29.000
we will look at how we can conditionally include or omit data from our

00:11:29.000 --> 00:11:30.000
resource.

