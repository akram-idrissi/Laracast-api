WEBVTT

00:00:00.000 --> 00:00:11.000
Different routes typically need to return a different response, even if we are working

00:00:11.000 --> 00:00:12.760
with similar resources.

00:00:12.760 --> 00:00:19.240
Like for example, the show and the index routes for our ticket controller, well they work

00:00:19.240 --> 00:00:22.900
with tickets, but they of course show different information.

00:00:22.900 --> 00:00:29.639
And I would make the argument that for the index routes, we don't need the description,

00:00:29.639 --> 00:00:34.980
primarily because if a client is making a request for a collection of tickets, well

00:00:34.980 --> 00:00:39.500
the more pertinent information is title, status, things like that.

00:00:39.500 --> 00:00:45.840
The description isn't something that the user or the client would want to display when requesting

00:00:45.840 --> 00:00:47.759
a list of tickets.

00:00:47.759 --> 00:00:55.799
So I want to remove the description attribute for everything but the show route.

00:00:55.799 --> 00:00:58.639
Now we can approach this in a couple of different ways.

00:00:58.639 --> 00:01:05.879
The first is to just create multiple resources and yes, that would work, no, it's not what

00:01:05.879 --> 00:01:10.320
we want to do, primarily because then we have multiple files that we have to keep track

00:01:10.320 --> 00:01:12.639
of and no.

00:01:12.639 --> 00:01:21.419
So thankfully, the JSON resource class gives us several tools that we can use to conditionally

00:01:21.419 --> 00:01:24.360
omit or include information.

00:01:24.360 --> 00:01:30.760
For example, there's a method called when, the idea being that when the condition that

00:01:30.760 --> 00:01:39.279
we pass to the first argument, like when the route is tickets show, then we want to include

00:01:39.279 --> 00:01:46.360
the value that we pass to the second argument, which would be the description from our model.

00:01:46.360 --> 00:01:49.699
And it would only be included when that condition is true.

00:01:49.699 --> 00:01:57.300
So therefore, the description is now going to be omitted for the collection of tickets.

00:01:57.300 --> 00:02:01.379
If we make that request, we can see that it is no longer listed there.

00:02:01.379 --> 00:02:07.339
But whenever we make a request for an individual ticket, we can see that it is still included.

00:02:07.339 --> 00:02:11.179
So it's nice and easy, it's straightforward, it's easy to read.

00:02:11.179 --> 00:02:15.339
And that's the most important thing to me because we don't have a bunch of if statements

00:02:15.339 --> 00:02:16.339
or anything like that.

00:02:16.339 --> 00:02:20.339
It just kind of flows in with the rest of our structure.

00:02:20.339 --> 00:02:26.059
Now, I also want to include the user information here, but then we have to start thinking about

00:02:26.059 --> 00:02:30.740
what do we need to include for different kinds of requests.

00:02:30.740 --> 00:02:36.220
For example, if we are requesting for a ticket, but we also want to include user information,

00:02:36.220 --> 00:02:38.300
we don't need all of the user information.

00:02:38.300 --> 00:02:44.220
We just need what is the most important user information that's related to the ticket.

00:02:44.220 --> 00:02:49.100
Now of course, as it is right now, we don't have really anything set up for our users.

00:02:49.100 --> 00:02:54.419
So let's start by creating a controller for our users.

00:02:54.419 --> 00:02:59.660
So we will make the controller API v1 users controller.

00:02:59.660 --> 00:03:05.699
We want it to be a resource controller, we want the model to user, and we want the requests

00:03:05.699 --> 00:03:06.699
as well.

00:03:06.699 --> 00:03:07.699
So let's do that.

00:03:07.699 --> 00:03:15.139
And while we're here, let's go ahead and let's make a new resource for our user resource

00:03:15.139 --> 00:03:18.699
so that we can have that in place as well.

00:03:18.699 --> 00:03:25.580
And with those files, now we do need to make some modifications because we created these

00:03:25.580 --> 00:03:28.539
store and update user requests.

00:03:28.539 --> 00:03:33.100
We need to move those into API v1.

00:03:33.100 --> 00:03:35.059
So let's do that.

00:03:35.059 --> 00:03:40.699
And unfortunately, Visual Studio Code does not automatically update those namespaces.

00:03:40.699 --> 00:03:42.339
So we need to do that as well.

00:03:42.339 --> 00:03:46.220
So we will tack on API v1.

00:03:46.220 --> 00:03:50.899
Let's just copy that because we need to paste that in several other places.

00:03:50.899 --> 00:03:53.779
Let's open up the update user request.

00:03:53.779 --> 00:03:57.100
We will paste in that new namespace.

00:03:57.100 --> 00:03:59.820
Let's go to users controller.

00:03:59.820 --> 00:04:04.779
And we need to modify the use statements for those request objects.

00:04:05.500 --> 00:04:11.139
With that in place, we are good to go as far as our controller, although let's do this.

00:04:11.139 --> 00:04:17.980
Let's go ahead and let's return our user resource and we'll call the collection method.

00:04:17.980 --> 00:04:23.540
We will pass in all of our users and we'll paginate these as well.

00:04:23.540 --> 00:04:26.420
So we will have that in place.

00:04:26.420 --> 00:04:30.220
Let's get rid of the create method because we don't need that.

00:04:30.220 --> 00:04:33.660
Let's get rid of the edit method because we don't need that either.

00:04:33.660 --> 00:04:39.500
And then for the show method, we will return a new user resource.

00:04:39.500 --> 00:04:41.220
We will pass in the user there.

00:04:41.220 --> 00:04:44.420
So our controller is all set to go.

00:04:44.420 --> 00:04:47.019
We do need to set up the routes here.

00:04:47.019 --> 00:04:50.619
So let's go to our API v1 file.

00:04:50.619 --> 00:04:53.859
Let's copy the route that we have set up for our tickets.

00:04:53.859 --> 00:04:57.700
And we'll just make the necessary changes for our users.

00:04:57.700 --> 00:05:04.940
So the controller is users controller and let's add that use statement.

00:05:04.940 --> 00:05:06.940
Okay, we have our ticket resource.

00:05:06.940 --> 00:05:09.859
Let's open up our user resource.

00:05:09.859 --> 00:05:13.100
Let's go ahead and let's start defining this.

00:05:13.100 --> 00:05:18.260
Now we want to follow the same kind of structure that we have for our tickets.

00:05:18.260 --> 00:05:22.179
So we will have the type, which is going to be a user.

00:05:22.179 --> 00:05:26.140
Let's have the ID, which is of course going to be

00:05:26.140 --> 00:05:28.579
the ID attribute from our model.

00:05:28.579 --> 00:05:31.500
Then we will list our attributes.

00:05:31.500 --> 00:05:34.660
Now some of these attributes we always want to display.

00:05:34.660 --> 00:05:39.019
Like for example, the name, that should be included with just about everything.

00:05:39.019 --> 00:05:43.220
Because I would imagine anytime we provide user information,

00:05:43.220 --> 00:05:45.779
we would want that name there as well.

00:05:45.779 --> 00:05:50.179
So we will include the name as well as the email.

00:05:50.179 --> 00:05:54.179
But all of the other information we don't necessarily need except

00:05:54.179 --> 00:05:58.220
if we are making a request from our user's controller.

00:05:58.220 --> 00:06:02.899
Like for example, there is the email verified at.

00:06:02.899 --> 00:06:05.579
And we could do what we did with the description,

00:06:05.579 --> 00:06:08.420
to where we would call the win method.

00:06:08.420 --> 00:06:13.500
Our condition would be for when the request route is and

00:06:13.500 --> 00:06:20.019
then we would want it for any request or any route from our user's route.

00:06:20.019 --> 00:06:25.179
And then we would simply provide the email verified at value.

00:06:25.179 --> 00:06:26.739
And that would work.

00:06:26.739 --> 00:06:30.779
I mean, there's something to say about code that works.

00:06:30.779 --> 00:06:34.579
However, we would have to do this three separate times.

00:06:34.579 --> 00:06:38.459
One for email verified at, one for updated at, and

00:06:38.459 --> 00:06:41.899
then we would need the created at as well.

00:06:41.899 --> 00:06:45.500
And there's gotta be a better way, and thankfully there is.

00:06:45.500 --> 00:06:49.059
We have a method called merge win.

00:06:49.059 --> 00:06:53.820
The idea being that once again, we provide a condition to test.

00:06:53.820 --> 00:06:59.459
So in this case, it is going to be if the route is from our user's routes,

00:06:59.459 --> 00:07:04.100
then we will include all of these other keys and values.

00:07:04.100 --> 00:07:07.220
So here we will have email verified at,

00:07:07.220 --> 00:07:10.700
which would of course be from our model value.

00:07:10.700 --> 00:07:16.700
Then we just need to include the created at and the updated at fields.

00:07:16.700 --> 00:07:23.459
So it's going to give us the same result as if we used individual win methods.

00:07:23.459 --> 00:07:25.660
But it's nice and compact.

00:07:25.660 --> 00:07:28.059
It's a lot easier to read and follow along.

00:07:28.059 --> 00:07:31.779
So therefore, well, it is what we need to do.

00:07:31.779 --> 00:07:36.700
So with that in place, we should be able to use that

00:07:36.700 --> 00:07:39.700
to include the user information in our ticket resource.

00:07:39.700 --> 00:07:44.339
But we do need to set up the relationship, don't we?

00:07:44.339 --> 00:07:46.820
So let's go to our ticket model.

00:07:46.820 --> 00:07:51.019
Public function, we'll call this simply user.

00:07:51.019 --> 00:07:58.019
And this is a belongs to relationship to where we will return.

00:07:58.019 --> 00:08:03.619
This belongs to and it belongs to a user.

00:08:03.619 --> 00:08:07.899
So with that in place, we should be able to go back to our ticket resource.

00:08:07.899 --> 00:08:14.220
And now let's say that after relationships, we will have the includes.

00:08:15.220 --> 00:08:18.140
Let's take a look at the JSON API specification.

00:08:18.140 --> 00:08:20.619
And this is where we can start to deviate from it

00:08:20.619 --> 00:08:25.380
because I don't necessarily like how they use included information.

00:08:25.380 --> 00:08:29.859
Like for example, here is the data for an individual article.

00:08:29.859 --> 00:08:33.020
And the relationships, all that stuff.

00:08:33.020 --> 00:08:37.979
And then as a sibling property, we have the included information.

00:08:37.979 --> 00:08:40.419
And I don't necessarily like that.

00:08:40.460 --> 00:08:45.539
And if this were a collection, then it would be even weirder

00:08:45.539 --> 00:08:49.020
because the data would be, of course, the collection of,

00:08:49.020 --> 00:08:51.099
well, in this case, it would be articles.

00:08:51.099 --> 00:08:54.059
And then the included would be a collection

00:08:54.059 --> 00:08:56.940
of all of the things that were included.

00:08:56.940 --> 00:08:59.539
I just don't like that approach.

00:08:59.539 --> 00:09:02.979
So instead, we're going to make the includes

00:09:02.979 --> 00:09:07.179
as part of the individual ticket info.

00:09:07.179 --> 00:09:10.020
So here we can have includes,

00:09:10.020 --> 00:09:14.260
and then we will include a new user resource,

00:09:14.260 --> 00:09:16.580
and we will pass in this user.

00:09:16.580 --> 00:09:19.979
So if we take a look at this, let's go to Postman.

00:09:19.979 --> 00:09:22.979
Let's go ahead and make a request for an individual ticket.

00:09:22.979 --> 00:09:26.619
We should still see pretty much everything that we did before,

00:09:26.619 --> 00:09:31.500
but now we have the includes and we have the user information.

00:09:31.500 --> 00:09:34.299
We have the type, the ID, and just the attributes

00:09:34.299 --> 00:09:38.099
that we would need in this particular request.

00:09:38.099 --> 00:09:41.580
The name and the email, all of the others are not there.

00:09:41.580 --> 00:09:42.739
So let's do this.

00:09:42.739 --> 00:09:45.700
Let's create a new blank collection,

00:09:45.700 --> 00:09:48.380
and let's call this users.

00:09:48.380 --> 00:09:49.580
And let's do this.

00:09:49.580 --> 00:09:51.700
Let's make it a little bit easier on ourselves.

00:09:51.700 --> 00:09:55.419
Let's set the authorization to bearer token.

00:09:55.419 --> 00:09:58.340
We're doing this on the entire collection

00:09:58.340 --> 00:10:00.020
so that every request that we make

00:10:00.020 --> 00:10:01.739
under this users collection

00:10:01.739 --> 00:10:05.140
is going to inherit this bearer token.

00:10:05.140 --> 00:10:08.619
So we will use our bearer variable there.

00:10:08.619 --> 00:10:11.140
We will be sure to save that.

00:10:11.140 --> 00:10:13.900
It would be nice if we could set headers here as well,

00:10:13.900 --> 00:10:18.020
but oh well, at least we can set the authorization.

00:10:18.020 --> 00:10:21.340
So now we can add a new request.

00:10:21.340 --> 00:10:23.739
Let's call this get users.

00:10:23.739 --> 00:10:26.979
The URL is going to be very similar to our tickets,

00:10:26.979 --> 00:10:30.380
except that we will need to make a request to users.

00:10:30.380 --> 00:10:33.059
We don't have to worry about the authorization,

00:10:33.059 --> 00:10:36.539
but we do need to set the accept header

00:10:36.539 --> 00:10:38.820
to application slash JSON.

00:10:38.820 --> 00:10:40.539
And let's send that.

00:10:40.539 --> 00:10:43.260
We should get our user information.

00:10:43.260 --> 00:10:46.140
So we can see that we have the data structure

00:10:46.140 --> 00:10:47.539
that we expected.

00:10:47.539 --> 00:10:49.659
And now we have the extra information,

00:10:49.659 --> 00:10:54.299
the verified at, the created at, and updated at values.

00:10:54.299 --> 00:10:57.179
Now with going through that whole process,

00:10:57.179 --> 00:10:58.700
in the next episode,

00:10:58.739 --> 00:11:03.500
I want us to revisit this idea of including things

00:11:03.500 --> 00:11:05.179
because by default,

00:11:05.179 --> 00:11:08.820
we really shouldn't be including the user information.

00:11:08.820 --> 00:11:12.299
That should be something that the client should opt into.

00:11:12.299 --> 00:11:13.979
Now, of course, yes,

00:11:13.979 --> 00:11:16.979
we need to supply the user ID,

00:11:16.979 --> 00:11:19.020
which we do inside of this relationships.

00:11:19.020 --> 00:11:22.260
But what I'm referring to is the actual user information,

00:11:22.260 --> 00:11:24.580
such as the name and the email address,

00:11:24.580 --> 00:11:28.059
since that's not necessarily absolutely needed

00:11:28.140 --> 00:11:30.260
for a request for our tickets,

00:11:30.260 --> 00:11:32.539
it needs to be an opt-in feature.

00:11:32.539 --> 00:11:35.140
And we will look at how to implement that next.

