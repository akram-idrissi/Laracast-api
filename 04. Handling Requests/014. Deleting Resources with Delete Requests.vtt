WEBVTT

00:00:00.000 --> 00:00:05.000
Deleting resources is probably the most straightforward thing that we can do.

00:00:05.000 --> 00:00:10.680
And it's probably the easiest thing that we will implement in our entire API,

00:00:10.680 --> 00:00:16.320
because all we need to do is delete our resource, we're done, see you next episode.

00:00:16.320 --> 00:00:20.520
No, I'm kidding, there is more that we need to do.

00:00:20.520 --> 00:00:23.200
Like for example, let's head on over to Postman.

00:00:23.200 --> 00:00:26.320
Before we do anything as far as our code is concerned,

00:00:26.320 --> 00:00:32.320
and let's copy the PostTickets request, and let's make some changes.

00:00:32.320 --> 00:00:35.320
Of course, this is going to be DeleteTicket.

00:00:35.320 --> 00:00:38.320
We need to change the request type to Delete.

00:00:38.320 --> 00:00:45.320
And let's try to delete a ticket with an ID of 800, something that we know doesn't exist.

00:00:45.320 --> 00:00:50.320
And whenever we send that request, we are going to see, well, it's a 404, obviously,

00:00:50.320 --> 00:00:52.320
because the ticket doesn't exist.

00:00:52.320 --> 00:00:55.320
But look at all of the information that we get.

00:00:55.320 --> 00:01:00.320
And in the previous episode, we talked about security through obscurity.

00:01:00.320 --> 00:01:07.320
We want to hide as much of our applications working as possible, and this isn't doing that.

00:01:07.320 --> 00:01:12.320
So we need to really control the response that we send.

00:01:12.320 --> 00:01:16.320
So instead of having a ticket as our parameter here,

00:01:16.320 --> 00:01:20.320
let's just have the ticket ID so that we could do something like this.

00:01:20.320 --> 00:01:24.320
We could try to find that ticket.

00:01:24.320 --> 00:01:29.320
But we could use the FindOrFail method so that if it does fail,

00:01:29.320 --> 00:01:34.320
we can catch that exception, and we would be good to go there.

00:01:34.320 --> 00:01:37.320
So here we will simply delete the ticket if it exists,

00:01:37.320 --> 00:01:42.320
and then we want to return something back to the client that sent it.

00:01:43.320 --> 00:01:49.320
So let's just return an OK, and ticket successfully deleted.

00:01:49.320 --> 00:01:51.320
That's going to be just fine.

00:01:51.320 --> 00:01:58.320
Now, if that ticket doesn't exist, we want to catch model not found exception.

00:01:58.320 --> 00:02:03.320
And then we need to discuss, what do we return in this particular case?

00:02:03.320 --> 00:02:07.320
You know, because in the previous episode, we talked about, you know,

00:02:07.320 --> 00:02:12.320
returning something other than a server error if we encountered a server error,

00:02:12.320 --> 00:02:16.320
because we want to hide as much as the implementation

00:02:16.320 --> 00:02:22.320
and as much of the application problems from any potential attacker.

00:02:22.320 --> 00:02:27.320
And I would make the argue that a 404 really isn't a problem with the application.

00:02:27.320 --> 00:02:31.320
It's just that the client requested something, and it doesn't exist.

00:02:31.320 --> 00:02:34.320
And you can ask many security experts.

00:02:34.320 --> 00:02:37.320
You would probably get different answers because, well, you just would.

00:02:37.320 --> 00:02:43.320
But one of the prevailing thoughts is, if this were a typical web application,

00:02:43.320 --> 00:02:47.320
we would return a 200, but we would have a page that says, you know,

00:02:47.320 --> 00:02:49.320
not found, something like that.

00:02:49.320 --> 00:02:51.320
In the case of an API, it's a little bit different

00:02:51.320 --> 00:02:55.320
because the response is part of the payload.

00:02:55.320 --> 00:02:58.320
So it's okay, I guess, to return a 200.

00:02:58.320 --> 00:03:00.320
It's part of the payload.

00:03:00.320 --> 00:03:04.320
So it's okay, I think, for us to return a 404.

00:03:04.320 --> 00:03:11.320
So what we will do is return the error, and we'll just say that ticket's not found.

00:03:11.320 --> 00:03:15.320
We don't have to specify what kind of ticket or the ID or anything like that.

00:03:15.320 --> 00:03:18.320
We can just say that it's not found, and we'll have a 404.

00:03:18.320 --> 00:03:25.320
So now let's try to send that request again, and we will see our, well,

00:03:25.320 --> 00:03:28.320
we see something that we shouldn't find.

00:03:28.320 --> 00:03:29.320
Oh, fail or fail.

00:03:29.320 --> 00:03:30.320
Yeah.

00:03:30.320 --> 00:03:32.320
Okay, so find or fail.

00:03:32.320 --> 00:03:33.320
That should fix that.

00:03:33.320 --> 00:03:37.320
So now we see that that ticket's not found.

00:03:37.320 --> 00:03:39.320
Ticket cannot be found.

00:03:39.320 --> 00:03:44.320
Let's at least use, you know, at least some proper grammar there.

00:03:44.320 --> 00:03:46.320
Okay, so we know that that doesn't exist.

00:03:46.320 --> 00:03:47.320
That's great.

00:03:47.320 --> 00:03:50.320
Let's try to delete a ticket that does exist.

00:03:50.320 --> 00:03:53.320
I think we created one with an ID of 103.

00:03:53.320 --> 00:03:55.320
So let's send that request.

00:03:55.320 --> 00:03:56.320
It was deleted.

00:03:56.320 --> 00:03:57.320
Great.

00:03:57.320 --> 00:04:01.320
Let's try to send a request for that ticket.

00:04:01.320 --> 00:04:05.320
So we'll have 103 here, and, well, we get a 404,

00:04:05.320 --> 00:04:09.320
but once again we get all of that extra information that we don't need.

00:04:09.320 --> 00:04:10.320
So let's do this.

00:04:10.320 --> 00:04:14.320
Let's go to the show method, not the store method,

00:04:14.320 --> 00:04:18.320
and let's wrap all of this within a try and catch.

00:04:18.320 --> 00:04:22.320
In fact, let's just copy what we have for our delete method

00:04:22.320 --> 00:04:25.320
and paste that in so that I don't have to type all of that,

00:04:25.320 --> 00:04:27.320
and we might run into the same thing.

00:04:27.320 --> 00:04:28.320
Yeah.

00:04:28.320 --> 00:04:29.320
So let's do this.

00:04:29.320 --> 00:04:33.320
For our show method, we will get the ticket ID,

00:04:33.320 --> 00:04:37.320
and we will try to get the ticket with that ID,

00:04:37.320 --> 00:04:39.320
and we'll just do that right here.

00:04:39.320 --> 00:04:42.320
We don't need to change any other part of the code.

00:04:42.320 --> 00:04:46.320
We'll just do find or fail this time,

00:04:46.320 --> 00:04:49.320
passing in the ticket ID, and everything else should work fine.

00:04:49.320 --> 00:04:54.320
So if we send that request once again, we see that the ticket cannot.

00:04:54.320 --> 00:04:57.320
I just said this needs to be at least.

00:04:57.320 --> 00:04:58.320
There we go.

00:04:58.320 --> 00:05:00.320
Ticket cannot be found.

00:05:00.320 --> 00:05:01.320
Okay.

00:05:01.320 --> 00:05:03.320
So let's.

00:05:03.320 --> 00:05:04.320
All right.

00:05:04.320 --> 00:05:05.320
Okay.

00:05:05.320 --> 00:05:06.320
So that's working.

00:05:06.320 --> 00:05:07.320
Okay.

00:05:07.320 --> 00:05:10.320
Let's move on because we essentially need the same kind of functionality

00:05:10.320 --> 00:05:15.320
for the author ticket controller

00:05:15.320 --> 00:05:20.320
because we need to be able to delete a ticket for a particular user in that case.

00:05:20.320 --> 00:05:25.320
So let's do the same thing here to where we will duplicate this post request,

00:05:25.320 --> 00:05:30.320
and we'll, of course, modify it for the delete user ticket.

00:05:30.320 --> 00:05:33.320
We need to change it to a delete request,

00:05:33.320 --> 00:05:41.320
and let's say that we want to delete the ticket ID of 45 for the user of 6.

00:05:41.320 --> 00:05:44.320
I have no idea if that's actually going to work,

00:05:44.320 --> 00:05:49.320
but this is going to give us the ability to at least start with that functionality.

00:05:49.320 --> 00:05:52.320
So let's open up our author tickets controller,

00:05:52.320 --> 00:05:58.320
and let's just copy our destroy method from our ticket controller,

00:05:58.320 --> 00:06:00.320
and we will use that as a basis.

00:06:00.320 --> 00:06:04.320
Because really the only difference here now is that we have the author ID.

00:06:04.320 --> 00:06:10.320
So not only do we need to check if we have a valid ticket with that ID,

00:06:10.320 --> 00:06:13.320
but we need to make sure that the ticket belongs to that particular author.

00:06:13.320 --> 00:06:17.320
So the most straightforward thing that comes to my mind is this.

00:06:17.320 --> 00:06:24.320
If we have a ticket, we can check the user ID to see if it is equal to the author ID,

00:06:24.320 --> 00:06:27.320
and if it is, then great.

00:06:27.320 --> 00:06:32.320
We will delete that ticket, and we will return OK.

00:06:32.320 --> 00:06:34.320
Otherwise, that ticket doesn't exist

00:06:34.320 --> 00:06:41.320
because the URL is explicitly requesting a ticket that belongs to a particular user,

00:06:41.320 --> 00:06:42.320
and it doesn't.

00:06:42.320 --> 00:06:47.320
So we will just return a 404, which is all we need to do here.

00:06:47.320 --> 00:06:49.320
We don't need an else statement there.

00:06:49.320 --> 00:06:55.320
So that should work, and we do need a use statement here

00:06:55.320 --> 00:06:59.320
for the model not found exception, but that should work.

00:06:59.320 --> 00:07:00.320
So let's try this.

00:07:00.320 --> 00:07:06.320
We will send that request, and bad method call exception.

00:07:06.320 --> 00:07:08.320
Error does not exist.

00:07:08.320 --> 00:07:10.320
It doesn't exist.

00:07:10.320 --> 00:07:11.320
We have that trait.

00:07:11.320 --> 00:07:17.320
Oh, we never inherited the API controller for our author tickets controller.

00:07:17.320 --> 00:07:18.320
Well, that's an easy enough fix.

00:07:18.320 --> 00:07:21.320
We will inherit the API controller.

00:07:21.320 --> 00:07:23.320
We can see that that ticket cannot be found.

00:07:23.320 --> 00:07:27.320
Okay, so let's try to delete a ticket that does exist.

00:07:27.320 --> 00:07:30.320
So this will be the author ID of one,

00:07:30.320 --> 00:07:37.320
and I know that there is a ticket with an ID of 102 for that user.

00:07:37.320 --> 00:07:42.320
So we should see a successful message for deleting that,

00:07:42.320 --> 00:07:43.320
and we do.

00:07:43.320 --> 00:07:44.320
Ticket successfully deleted.

00:07:44.320 --> 00:07:46.320
So that's basically it.

00:07:46.320 --> 00:07:50.320
We just need to check to make sure that the resource exists,

00:07:50.320 --> 00:07:52.320
and if it does, we delete it.

00:07:52.320 --> 00:07:54.320
If not, we return a 404.

00:07:54.320 --> 00:07:57.320
And in the case of a nested controller,

00:07:57.320 --> 00:08:02.320
we additionally check if the resource belongs to that particular user.

00:08:02.320 --> 00:08:03.320
If so, great.

00:08:03.320 --> 00:08:04.320
We delete it.

00:08:04.320 --> 00:08:06.320
Otherwise, we return a 404.

00:08:06.320 --> 00:08:10.320
So in the next episode, we can focus on editing our resource.

