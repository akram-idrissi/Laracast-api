WEBVTT

00:00:00.000 --> 00:00:10.640
Well, before we jump into token abilities, we need to take a step back and think of just

00:00:10.640 --> 00:00:15.480
user authorization in general, because there's so much more to user authorization than just

00:00:15.480 --> 00:00:17.160
can a user do something.

00:00:17.160 --> 00:00:20.000
For example, let's take a look at a ticket.

00:00:20.000 --> 00:00:25.840
This is a ticket with an ID of 20, and the author has an ID of 1.

00:00:25.840 --> 00:00:31.920
So in a typical application, we would want to limit who can edit this ticket based upon

00:00:31.920 --> 00:00:32.919
a few factors.

00:00:32.919 --> 00:00:34.599
First of all, is it the author?

00:00:34.599 --> 00:00:37.639
And second of all, is it a manager or an admin?

00:00:37.639 --> 00:00:38.639
And that's it.

00:00:38.639 --> 00:00:41.080
No one else should be able to edit this ticket.

00:00:41.080 --> 00:00:44.279
So it's more than just can a user do something.

00:00:44.279 --> 00:00:47.820
It's can a user do something for a particular resource?

00:00:47.820 --> 00:00:50.759
So then the question becomes, how do we start to implement that?

00:00:50.759 --> 00:00:54.419
Because we could do all of those checks inside of our controller.

00:00:54.419 --> 00:00:59.500
We could check the token ability using a token can method.

00:00:59.500 --> 00:01:04.540
And then we could say that the ability could be ticket update or something like that.

00:01:04.540 --> 00:01:11.440
But then we also need to make sure that the user is the same user that created that ticket.

00:01:11.440 --> 00:01:14.980
And then if we had any other criteria, we could have that here.

00:01:14.980 --> 00:01:18.820
But you know, of course, one of the things that I've wanted to do is keep our controllers

00:01:18.820 --> 00:01:20.699
as lean as possible.

00:01:20.699 --> 00:01:24.660
So the more criteria we have, the more this is going to grow.

00:01:24.660 --> 00:01:25.779
And I don't want to do that.

00:01:25.779 --> 00:01:29.339
So then the question becomes, you know, once again, how do we implement this?

00:01:29.339 --> 00:01:32.980
And I want to keep all of these things in one place because I don't want to have to

00:01:32.980 --> 00:01:39.500
go to one file to see, okay, is the user authorized here and then go to another file for some

00:01:39.500 --> 00:01:40.500
other rules.

00:01:40.500 --> 00:01:41.980
I just want one place.

00:01:41.980 --> 00:01:48.260
So one thing that we could use is a policy because that ties into the authorize method

00:01:48.379 --> 00:01:53.580
so that we could specify an ability and then the model that we wanted to check.

00:01:53.580 --> 00:01:59.059
And then the policy would determine whether or not the user was authorized to edit that

00:01:59.059 --> 00:02:00.059
ticket.

00:02:00.059 --> 00:02:06.019
And if they weren't, it would throw an authorization exception so that we could catch that and

00:02:06.019 --> 00:02:13.619
then return a payload that basically said you are not authorized to update that resource.

00:02:13.619 --> 00:02:15.699
And that would be a 401.

00:02:15.699 --> 00:02:17.860
So I like this approach.

00:02:17.860 --> 00:02:19.460
So let's start implementing that.

00:02:19.460 --> 00:02:23.300
We can make a policy using Artisan, make policy.

00:02:23.300 --> 00:02:28.919
And we need to version this because different versions might have different policy requirements.

00:02:28.919 --> 00:02:33.419
So we will create that policy and then we need to register the policy.

00:02:33.419 --> 00:02:36.660
And we would do that inside of the auth service provider.

00:02:36.660 --> 00:02:42.899
There is this policies array to where we would map a policy to a model class.

00:02:42.899 --> 00:02:48.500
So for our ticket model, we want to use the ticket policy that we just created.

00:02:48.500 --> 00:02:54.539
Now hopefully this is throwing off some red flags because we have just bound this ticket

00:02:54.539 --> 00:02:58.940
policy, this version one ticket policy to our ticket model.

00:02:58.940 --> 00:03:05.059
And there's nothing that says we can't come in here and say, okay, we have a V2 that we

00:03:05.059 --> 00:03:07.699
also want to use and we can do that just fine.

00:03:07.699 --> 00:03:12.860
And that's perfectly fine, but this is going to throw a wrench in our plans because the

00:03:12.860 --> 00:03:18.619
authorized method doesn't really know which policy version that we want to use.

00:03:18.619 --> 00:03:20.020
Well we could tell it that.

00:03:20.020 --> 00:03:24.380
Whenever we call the authorized method, we could pass an array as the second argument

00:03:24.380 --> 00:03:29.860
where we can specify the ticket and then the policy that we wanted to use.

00:03:29.860 --> 00:03:33.179
So here we could say ticket policy for V1.

00:03:33.179 --> 00:03:36.699
But I don't want to do that because that means every time we call the authorized method,

00:03:36.699 --> 00:03:38.600
we would have to do the same thing.

00:03:38.600 --> 00:03:44.179
And I like the simplicity of just passing the ability and the model and that's it.

00:03:44.179 --> 00:03:45.860
So what if we did something like this?

00:03:45.860 --> 00:03:48.880
We would have a method called isAble.

00:03:48.880 --> 00:03:53.820
And for all intents and purposes, this is going to be exactly the same as calling the

00:03:53.820 --> 00:03:58.059
authorized method, but it's going to be specialized for our case.

00:03:58.059 --> 00:04:04.300
So that's for our V1 ticket controller, it would use the V1 ticket policy.

00:04:04.300 --> 00:04:08.500
And then we would use the same concept for our author's controller.

00:04:08.500 --> 00:04:13.839
So for our V1 author's controller, we would have a V1 author policy.

00:04:13.839 --> 00:04:16.660
So then we just have to implement this thing.

00:04:16.660 --> 00:04:22.820
And I think, you know, since we have this base API controller, let's just write that

00:04:22.820 --> 00:04:29.380
public isAble method here to where we have the ability and then we have the target model.

00:04:29.380 --> 00:04:33.540
But then we also need this to be as flexible as possible because we need to be able to

00:04:33.540 --> 00:04:37.220
specify the policy class that we want to use.

00:04:37.220 --> 00:04:42.179
So let's say that we'll have a protected, we'll just call it policy class.

00:04:42.179 --> 00:04:49.220
So that inside of this isAble, we will simply return this authorize, we'll pass in the ability.

00:04:49.220 --> 00:04:53.940
But then for the second argument, we would use that syntax that I briefly showed you

00:04:53.940 --> 00:05:00.820
before to where we pass in an array that has the target model and then the policy class.

00:05:00.820 --> 00:05:08.019
So that means inside of our ticket controller, we would need to specify that policy class.

00:05:08.019 --> 00:05:14.899
So we'll have protected policy class is equal to the ticket policy class.

00:05:14.899 --> 00:05:21.019
So that inside of our update method, all we have to do is pass in update, pass in ticket.

00:05:21.019 --> 00:05:27.220
If the user is authorized to update that ticket, then everything should work, otherwise it

00:05:27.220 --> 00:05:28.220
should fail.

00:05:28.220 --> 00:05:34.260
So let's try this, first of all, with this ticket with an ID of 20 because we are signed

00:05:34.260 --> 00:05:36.540
in with the user with an ID of one.

00:05:36.540 --> 00:05:41.660
So let's modify our body, although we need to go to the patch request, don't we?

00:05:41.660 --> 00:05:44.540
So the ticket is already canceled.

00:05:44.540 --> 00:05:47.100
Let's say that we want to complete that.

00:05:47.100 --> 00:05:52.420
So we will send that request, hopefully, well, we are not authorized.

00:05:52.420 --> 00:05:54.619
That's not what I intended to see.

00:05:54.619 --> 00:05:56.420
I intended to see this working.

00:05:56.420 --> 00:05:59.179
So let me make sure everything is OK.

00:05:59.179 --> 00:06:01.140
We are returning this authorize.

00:06:01.140 --> 00:06:11.500
We are specifying the ability target model and this policy class.

00:06:11.500 --> 00:06:14.959
We didn't implement the policy.

00:06:14.959 --> 00:06:16.140
We created it.

00:06:16.140 --> 00:06:17.140
Got ahead of myself.

00:06:17.140 --> 00:06:21.579
OK, so inside of our ticket policy class, which we've just now opened, we didn't even

00:06:21.579 --> 00:06:22.579
open it.

00:06:22.579 --> 00:06:23.579
Isn't that fun?

00:06:23.739 --> 00:06:29.500
So what we can do is create a new method that matches the ability that we are checking for.

00:06:29.500 --> 00:06:31.459
So in this case, it would be update.

00:06:31.459 --> 00:06:32.579
And here we get two things.

00:06:32.579 --> 00:06:38.480
We get the user, that is the user that is currently signed in, that is trying to update

00:06:38.480 --> 00:06:40.459
in this particular case.

00:06:40.459 --> 00:06:44.899
And then we have the ticket that we are wanting to work with.

00:06:44.899 --> 00:06:48.260
My gosh, I can't believe I did that.

00:06:48.260 --> 00:06:51.359
So in this case, our check is going to be very simple.

00:06:51.359 --> 00:06:56.799
We want to see if the user ID is equal to the ticket user ID.

00:06:56.799 --> 00:06:57.799
Now it'll work.

00:06:57.799 --> 00:07:02.760
We can go back to Postman, we can send that request, and we can see that, sure enough,

00:07:02.760 --> 00:07:03.760
it worked.

00:07:03.760 --> 00:07:06.559
We updated that status to see.

00:07:06.559 --> 00:07:12.320
But let's try in the case of a ticket that does not belong to our user.

00:07:12.320 --> 00:07:15.359
And the ticket with an ID of 101 does not.

00:07:15.359 --> 00:07:19.679
In fact, I don't even remember what user we assigned to that.

00:07:19.720 --> 00:07:24.000
So let's do a GET request to see what that user is.

00:07:24.000 --> 00:07:25.440
And it's a user with an ID of 2.

00:07:25.440 --> 00:07:28.279
So definitely, this is not going to work.

00:07:28.279 --> 00:07:31.299
And thankfully, we are getting the results that we expected.

00:07:31.299 --> 00:07:37.839
So now that we have this policy set up, we can use this for all of our criteria.

00:07:37.839 --> 00:07:44.959
So that in the next episode, we will assign a token ability and check for the token ability.

