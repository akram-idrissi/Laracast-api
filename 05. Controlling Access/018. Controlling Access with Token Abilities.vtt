WEBVTT

00:00:00.000 --> 00:00:11.500
In the previous episode, we implemented a policy for updating tickets, and we only allow

00:00:11.500 --> 00:00:14.220
users to edit their own tickets.

00:00:14.220 --> 00:00:15.840
They can't edit someone else's.

00:00:15.840 --> 00:00:21.340
But of course, there are times when we want a user to be able to edit someone else's ticket.

00:00:21.340 --> 00:00:25.500
Like for example, if that user is a manager, that makes perfect sense.

00:00:25.500 --> 00:00:35.580
Managers really aren't the only users that should have that capability.

00:00:35.580 --> 00:00:38.020
Like for example, if we had an admin.

00:00:38.020 --> 00:00:43.939
A manager isn't necessarily an admin, so their permissions aren't going to align for everything,

00:00:43.939 --> 00:00:49.619
but for updating a ticket, yeah, that would probably be something that they would have

00:00:49.619 --> 00:00:50.619
in common.

00:00:50.619 --> 00:00:55.900
But if there were any other kind of users that had special permissions for updating

00:00:55.900 --> 00:00:58.259
tickets, then we would need to check for that as well.

00:00:58.259 --> 00:01:04.220
And of course, this is unsustainable because as more and more types of users are added,

00:01:04.220 --> 00:01:05.879
we have to add those checks.

00:01:05.879 --> 00:01:09.480
So of course, that's where the roles come into play.

00:01:09.480 --> 00:01:16.660
So that if a user is in a role that is ticket update, then yes, they can update that ticket.

00:01:16.660 --> 00:01:19.139
But roles have their own problems.

00:01:19.139 --> 00:01:24.500
Like for example, we would have to implement a role system or we would need to use a package

00:01:24.500 --> 00:01:27.139
that sets one up for us.

00:01:27.139 --> 00:01:33.180
But in our case, we are using Sanctum Tokens and Sanctum Tokens have a permission system

00:01:33.180 --> 00:01:34.180
built in.

00:01:34.180 --> 00:01:38.860
It's the abilities that we can assign to a token whenever we create that token.

00:01:38.860 --> 00:01:43.419
So inside of our auth controller, whenever we create a token, when a user signs in, we

00:01:43.419 --> 00:01:44.820
are assigning abilities.

00:01:44.820 --> 00:01:49.540
Now, as it is right now, they have complete and total control over everything because

00:01:49.540 --> 00:01:52.220
well, that's the ability that we assigned.

00:01:52.220 --> 00:01:56.699
But let's say that a manager signed in, you know, we could say that they would have a

00:01:56.699 --> 00:02:02.459
ticket create ability, a ticket update ability, you know, and things like that.

00:02:02.459 --> 00:02:06.580
And if just a normal user signed in, they would be able to create tickets, but they

00:02:06.580 --> 00:02:13.139
might have a slightly different ability so that they can only update their own tickets.

00:02:13.139 --> 00:02:17.100
So of course, the abilities that we assign here are going to be different based upon

00:02:17.100 --> 00:02:19.139
the user that signs in.

00:02:19.139 --> 00:02:25.600
And one of the really nice things about this idea of token abilities is that we don't have

00:02:25.600 --> 00:02:28.580
to limit it just to our purposes.

00:02:28.580 --> 00:02:34.779
If for whatever reason, we wanted to allow users to create tokens with certain permissions,

00:02:34.779 --> 00:02:35.779
we can do that.

00:02:35.779 --> 00:02:41.899
If you create a new Laravel application using Jetstream and you opt into the API stuff out

00:02:41.899 --> 00:02:47.619
of the box, users have the ability to create new tokens and assign permissions.

00:02:47.619 --> 00:02:52.100
So this concept of token abilities is very flexible.

00:02:52.100 --> 00:02:56.100
We can use it for just about any kind of purpose that we might need.

00:02:56.100 --> 00:02:59.740
The only problem in our case is that, you know, we will have different abilities for

00:02:59.740 --> 00:03:01.300
different types of users.

00:03:01.300 --> 00:03:07.380
So whenever a user signs in and we create that token and we assign the abilities, what

00:03:07.380 --> 00:03:12.179
I want is something like this to where we would have an abilities class where we would

00:03:12.179 --> 00:03:14.419
call get abilities.

00:03:14.419 --> 00:03:20.179
We could pass in the user and then that would return the abilities for that particular user.

00:03:20.179 --> 00:03:24.660
So let's implement that inside of the app folder.

00:03:24.660 --> 00:03:30.339
Let's create a permissions folder and I'm going to version this, although when it comes

00:03:30.339 --> 00:03:35.500
to abilities, I'm not sure that we need to version it, but I can see where we might want

00:03:35.500 --> 00:03:36.500
to.

00:03:36.619 --> 00:03:40.339
So I'm going to version this and I'm just going to call it abilities.php.

00:03:40.339 --> 00:03:44.179
Namespace is app permissions v1.

00:03:44.179 --> 00:03:50.580
And we're going to make this a final class because I don't think we want to use this

00:03:50.580 --> 00:03:52.740
as a base class for anything.

00:03:52.740 --> 00:04:00.380
And here we will define several string constants because whenever we need to check for an ability,

00:04:00.380 --> 00:04:05.740
we would have to check a string and we don't want to keep typing the same string over and

00:04:05.740 --> 00:04:10.940
over again throughout our application because we're human, we are going to make a mistake.

00:04:10.940 --> 00:04:17.859
So we want some kind of constant value that we can use to take all of, not necessarily

00:04:17.859 --> 00:04:23.700
the guesswork, but definitely the human error out of working with strings.

00:04:23.700 --> 00:04:28.220
So this abilities class is going to have a lot of constants.

00:04:28.220 --> 00:04:32.640
So in this case, we're going to have a constant called create ticket and its value is going

00:04:32.640 --> 00:04:36.279
to be the ability name, ticket create.

00:04:36.279 --> 00:04:38.000
That is going to be the ability.

00:04:38.000 --> 00:04:44.239
So then we would need an update ticket, a replace ticket, and a delete ticket.

00:04:44.239 --> 00:04:48.799
And of course, we need to update those string values.

00:04:48.799 --> 00:04:50.359
But these are very generic.

00:04:50.359 --> 00:04:55.160
The idea of ticket update means that you can update any ticket that you need.

00:04:55.160 --> 00:05:02.239
So what we need to do then is have something that just normal users would have, like update

00:05:02.279 --> 00:05:07.959
own ticket and delete own ticket, so that the ability would actually be something like

00:05:07.959 --> 00:05:10.000
this, ticket own update.

00:05:10.000 --> 00:05:15.920
But then, you know, managers would need to have the ability to manage user accounts.

00:05:15.920 --> 00:05:21.119
So we could do something like this to where we would have, once again, create, update,

00:05:21.119 --> 00:05:24.600
and replace, but it would be for the users.

00:05:24.600 --> 00:05:30.839
And then we would change the string values to be user create, user update, replace, and

00:05:30.839 --> 00:05:31.839
delete.

00:05:32.440 --> 00:05:37.279
So then we would have our static method called get abilities.

00:05:37.279 --> 00:05:44.679
We would get the user supplied to us, because we would need to see if the user is a manager.

00:05:44.679 --> 00:05:49.320
And we don't have this flag yet, so we're going to need to add this to our model.

00:05:49.320 --> 00:05:54.839
But if the user is a manager, then we can return all of the abilities that they would

00:05:54.839 --> 00:05:59.720
need, such as create ticket, update, and all of that stuff.

00:05:59.720 --> 00:06:04.440
They would also need to be able to do the same thing for the user resources.

00:06:04.440 --> 00:06:09.760
But if the user is not a manager, then for right now, we could just have an else statement.

00:06:09.760 --> 00:06:15.279
As we add other classes of users, then we can, of course, make this whatever we need

00:06:15.279 --> 00:06:16.279
it to be.

00:06:16.279 --> 00:06:21.720
So for just normal users, they should be able to create a ticket, they should be able to

00:06:21.720 --> 00:06:26.040
update own ticket, and delete own ticket.

00:06:26.040 --> 00:06:28.440
I don't think that they need to do anything else.

00:06:28.440 --> 00:06:34.200
So that means, inside of our ticket policy, what we can do then is first of all check

00:06:34.200 --> 00:06:41.160
if the user has a token that can, and we will use our abilities class to update ticket.

00:06:41.160 --> 00:06:42.839
Then we would return true.

00:06:42.839 --> 00:06:49.799
But then we also need to check if the user's token can update their own ticket, then we

00:06:49.799 --> 00:06:54.440
return the statement that we had before, otherwise we return false.

00:06:54.440 --> 00:06:57.000
Now of course, we need to update our database.

00:06:57.000 --> 00:06:58.519
So let's do this.

00:06:58.519 --> 00:07:04.239
Let's go to our user model, and you know what, we don't need to do anything there.

00:07:04.239 --> 00:07:08.179
We do, however, need to go to our user migration.

00:07:08.179 --> 00:07:10.959
So let's open up create users table.

00:07:10.959 --> 00:07:17.679
Let's add a boolean field called is manager, and let's give this a default of false.

00:07:17.679 --> 00:07:20.239
But we also need a manager user.

00:07:20.239 --> 00:07:21.959
So let's go to our database seeder.

00:07:21.959 --> 00:07:25.399
We'll leave everything else as it is.

00:07:25.440 --> 00:07:28.839
But now let's create a manager user.

00:07:28.839 --> 00:07:30.880
So the email is arbitrary.

00:07:30.880 --> 00:07:31.959
We can use whatever we want.

00:07:31.959 --> 00:07:34.799
I'm going to use manager at manager.com.

00:07:34.799 --> 00:07:40.820
The password, we will encrypt using bcrypt password.

00:07:40.820 --> 00:07:45.720
The name, I'm going to set as just the manager.

00:07:45.720 --> 00:07:49.359
And then we will set the is manager to true.

00:07:49.359 --> 00:07:51.000
And that should be good enough.

00:07:51.000 --> 00:07:56.079
So now let's just wipe out the database and start completely over.

00:07:56.079 --> 00:07:59.399
So we'll use artisan to dbwipe.

00:07:59.399 --> 00:08:04.760
That will wipe everything out so that then we can run the migration.

00:08:04.760 --> 00:08:08.600
And then we can seed the database.

00:08:08.600 --> 00:08:13.359
And that should get us all set up as far as our database is concerned.

00:08:13.359 --> 00:08:14.959
Let's go to our auth controller.

00:08:14.959 --> 00:08:18.720
We do need a use statement for this abilities class.

00:08:18.720 --> 00:08:20.179
So let's bring that in.

00:08:20.220 --> 00:08:21.739
Everything else should be okay now.

00:08:21.739 --> 00:08:24.100
So we just need to make sure that this works.

00:08:24.100 --> 00:08:27.339
But now that we have a different set of users, we need to look.

00:08:27.339 --> 00:08:31.019
So let's grab this user with an ID of one.

00:08:31.019 --> 00:08:32.500
Let's grab that email address.

00:08:32.500 --> 00:08:34.059
Let's go to Postman.

00:08:34.059 --> 00:08:38.340
And we want to sign in with that user information.

00:08:38.340 --> 00:08:42.340
So the email address is whatever we copied from the database.

00:08:42.340 --> 00:08:45.140
Password is, of course, password.

00:08:45.140 --> 00:08:47.460
So we will send that request.

00:08:47.460 --> 00:08:48.940
We got our token.

00:08:48.940 --> 00:08:50.059
So let's copy that.

00:08:50.940 --> 00:08:54.340
Let's go to our bearer variable, paste that in, save it.

00:08:54.340 --> 00:08:58.380
So now we should be able to get the tickets for that user.

00:08:58.380 --> 00:08:59.460
So let's do that.

00:08:59.460 --> 00:09:02.580
Let's get the tickets for the user number one.

00:09:02.580 --> 00:09:08.260
And we can see that the ticket with an ID of two is one that we should be able to edit.

00:09:08.260 --> 00:09:10.859
So let's just change the status.

00:09:10.859 --> 00:09:13.219
It is set to active right now.

00:09:13.219 --> 00:09:16.219
So let's change that to completed.

00:09:16.219 --> 00:09:18.219
Let's go to the patch ticket.

00:09:18.260 --> 00:09:21.020
That was the ticket with an ID of two.

00:09:21.020 --> 00:09:24.020
The status, we will set to C for completed.

00:09:24.020 --> 00:09:27.219
We don't want to include anything else.

00:09:27.219 --> 00:09:29.059
We want just that status.

00:09:29.059 --> 00:09:35.219
So whenever we send that, we see, yes, indeed, that was successfully updated.

00:09:35.219 --> 00:09:38.059
So let's try to edit the ticket with an ID of one.

00:09:38.059 --> 00:09:39.580
We should not be able to.

00:09:39.580 --> 00:09:42.219
So I'm not even going to worry to see what the status was,

00:09:42.219 --> 00:09:44.820
because that is exactly what we get.

00:09:44.820 --> 00:09:47.419
You are not authorized to update that resource.

00:09:47.419 --> 00:09:49.140
So that works just fine.

00:09:49.140 --> 00:09:50.059
But let's sign out.

00:09:50.059 --> 00:09:53.020
And let's sign in as our manager.

00:09:53.020 --> 00:09:57.739
So we will change email once again to manager at manager.com.

00:09:57.739 --> 00:09:59.380
We will send that request.

00:09:59.380 --> 00:10:01.340
We will get a new token.

00:10:01.340 --> 00:10:02.619
So let's copy that.

00:10:02.619 --> 00:10:06.219
We want to put that inside of our bearer variable.

00:10:06.219 --> 00:10:09.260
And so now we should be able to edit that ticket.

00:10:09.260 --> 00:10:13.940
I guess we should be sure to see what that value is to begin with.

00:10:13.979 --> 00:10:18.260
So the ticket with an ID of one is active as well.

00:10:18.260 --> 00:10:20.380
So let's say that that is going to be canceled.

00:10:20.380 --> 00:10:22.700
So let's change that to an X.

00:10:22.700 --> 00:10:23.659
Let's send that.

00:10:23.659 --> 00:10:26.340
We should, yep, that worked just fine.

00:10:26.340 --> 00:10:30.700
So our managers can update all of the tickets that they need.

00:10:30.700 --> 00:10:34.979
The users can only update their own tickets.

00:10:34.979 --> 00:10:39.900
So with our update policy finished, we can just use this as a basis for

00:10:39.900 --> 00:10:41.099
everything else.

00:10:41.099 --> 00:10:45.580
And for example, for deleting, all we need to do is check if

00:10:45.580 --> 00:10:51.780
the token has the ability to delete the ticket or delete own ticket.

00:10:51.780 --> 00:10:53.859
All of the other logic is going to be the same.

00:10:53.859 --> 00:10:58.820
And the replace is going to be a lot simpler because

00:10:58.820 --> 00:11:03.419
the typical user does not have the ability to replace the ticket.

00:11:03.419 --> 00:11:08.099
So this will be a little bit different in that we will check if the token

00:11:08.099 --> 00:11:13.500
has the replace ticket ability, and if so, then we return true.

00:11:13.500 --> 00:11:15.179
Otherwise, we return false.

00:11:15.179 --> 00:11:19.619
And really creating is going to be essentially the same thing.

00:11:19.619 --> 00:11:23.659
Let's call this store just because we're keeping it in line with

00:11:23.659 --> 00:11:27.739
the convention of being the name of the method on the controller.

00:11:27.739 --> 00:11:31.260
So we have delete, replace, store goes next.

00:11:31.260 --> 00:11:35.260
The ability is create ticket, and that should be fine.

00:11:35.260 --> 00:11:40.500
So we should be able to go to the ticket controller and just apply these policies.

00:11:40.500 --> 00:11:45.820
So let's see, for the store method, we are finding that user.

00:11:45.820 --> 00:11:48.299
I guess I took out the code to actually create that ticket.

00:11:48.299 --> 00:11:49.700
We need to add that back in.

00:11:49.700 --> 00:11:54.619
But for right now, what I'm concerned with is to use the is able.

00:11:54.619 --> 00:11:55.900
Is that what we called it?

00:11:55.900 --> 00:11:59.140
Let's scroll down to the, it's this.

00:11:59.140 --> 00:12:04.299
Okay, so yeah, so we will check to see if the user can store this.

00:12:04.299 --> 00:12:07.859
We will pass in null here because we don't have a ticket.

00:12:07.859 --> 00:12:11.219
But then let's add the to do, create ticket there.

00:12:11.219 --> 00:12:14.580
Let's scroll on down to the replace.

00:12:14.580 --> 00:12:17.900
So we fetch the ticket before we update that.

00:12:17.900 --> 00:12:21.940
We need to check our policy for replace, and

00:12:21.940 --> 00:12:24.859
then essentially the same thing for delete.

00:12:24.859 --> 00:12:27.500
So once again, check our policy, but

00:12:27.500 --> 00:12:31.140
we are checking the delete policy, and we should be good to go.

00:12:31.140 --> 00:12:35.659
And one of the really nice things about using token abilities is that we can be

00:12:35.659 --> 00:12:41.739
as granular as we need, for example, for updating a ticket.

00:12:41.739 --> 00:12:46.020
Managers should be able to update everything about a ticket, but

00:12:46.020 --> 00:12:50.099
a typical user should only be able to update certain fields.

00:12:50.099 --> 00:12:53.700
Because otherwise, they would be able to replace everything, and

00:12:53.700 --> 00:12:56.739
we don't want to provide that functionality to them.

00:12:56.739 --> 00:13:00.500
So in the next episode, we will look at how we can do that.

