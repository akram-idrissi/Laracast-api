WEBVTT

00:00:00.000 --> 00:00:10.280
For this episode, I originally planned to implement the Authors Controller to manage

00:00:10.280 --> 00:00:11.400
our users.

00:00:11.400 --> 00:00:13.840
But that's not really what we need to do.

00:00:13.840 --> 00:00:17.219
Our authors are of course users, but they are just authors.

00:00:17.219 --> 00:00:20.440
We need a Users Controller to manage our users.

00:00:20.440 --> 00:00:24.120
So I'm going to make a quick little change to our Authors Controller.

00:00:24.120 --> 00:00:27.879
Because as it currently stands, we are returning all of our users.

00:00:27.879 --> 00:00:31.320
And not every user is going to have created a ticket.

00:00:31.320 --> 00:00:36.599
So what I want to do is change this so that we return only the users that have created

00:00:36.599 --> 00:00:37.599
tickets.

00:00:37.599 --> 00:00:39.200
Therefore, they are authors.

00:00:39.200 --> 00:00:43.000
So we're going to start by selecting all of the columns from our Users table.

00:00:43.000 --> 00:00:52.360
And we're going to join the Tickets table on the Users ID is equal to the Tickets.UserID.

00:00:52.360 --> 00:00:56.599
And this is going to give us just the users that have created tickets.

00:00:56.599 --> 00:01:00.439
However, this is going to give us a record for every ticket.

00:01:00.439 --> 00:01:05.400
So that means if a user with an ID of 1 has created 10 tickets, then we are going to have

00:01:05.400 --> 00:01:08.120
10 records for the user with an ID of 1.

00:01:08.120 --> 00:01:10.839
So what we want to do is call distinct.

00:01:10.839 --> 00:01:15.440
That way we get only one record per user, and then we will paginate those.

00:01:15.440 --> 00:01:17.839
But of course, we need to include our filters.

00:01:17.839 --> 00:01:22.639
So before we call distinct, let's add in our filter.

00:01:22.639 --> 00:01:24.519
And that should be fine.

00:01:24.519 --> 00:01:25.519
And there we go.

00:01:25.519 --> 00:01:29.599
This is going to return just our authors, and we're good to go.

00:01:29.599 --> 00:01:34.760
Now we need our UserController, and we can approach this in a variety of different ways.

00:01:34.760 --> 00:01:41.720
We could create our AuthorController through Artisan, but our AuthorsController was originally

00:01:41.720 --> 00:01:43.080
the UsersController.

00:01:43.080 --> 00:01:48.320
So let's just copy and paste that, and we'll make the necessary changes.

00:01:48.320 --> 00:01:51.639
So of course, the name of this file is going to be UserController.

00:01:51.639 --> 00:01:54.599
Let's change the name of the class to UserController.

00:01:54.599 --> 00:02:00.639
And this is going to use the UserPolicy, which of course we need to create.

00:02:00.639 --> 00:02:06.680
So let's set that Policy class to UserPolicy class.

00:02:06.680 --> 00:02:11.160
And let's go ahead and create that class, and we'll do so once again by just copying

00:02:11.160 --> 00:02:14.240
what we have with TicketPolicy and pasting that.

00:02:14.240 --> 00:02:18.000
We could use Artisan, but this is probably going to be faster.

00:02:18.000 --> 00:02:19.000
Probably.

00:02:19.039 --> 00:02:25.679
And this policy is going to be very easy, because unlike the TicketPolicy, only users

00:02:25.679 --> 00:02:31.320
that are able to manage other users are going to have the abilities that they need.

00:02:31.320 --> 00:02:32.839
So this is going to be very simple.

00:02:32.839 --> 00:02:39.320
We will simply return where the user has a token that can, in this case, delete.

00:02:39.320 --> 00:02:44.119
So we will use our Abilities and the DeleteUser ability.

00:02:44.119 --> 00:02:48.639
And we are essentially going to do the same thing for each individual method here.

00:02:48.639 --> 00:02:52.160
So ReplaceTicket will become ReplaceUser.

00:02:52.160 --> 00:02:56.080
The Store method is going to be CreateUser.

00:02:56.080 --> 00:02:59.500
And there's nothing else inside of here, so we'll just have one line.

00:02:59.500 --> 00:03:04.960
The Update method is going to be the same thing, to where we check if the user has the

00:03:04.960 --> 00:03:06.960
ability to update the user.

00:03:06.960 --> 00:03:07.960
And that's it.

00:03:07.960 --> 00:03:09.039
Very simple policy.

00:03:09.039 --> 00:03:10.039
We're done there.

00:03:10.039 --> 00:03:16.960
And while we are thinking about these things, let's also think about our requests.

00:03:17.000 --> 00:03:21.960
Because we need to create requests for, well, yeah, everything.

00:03:21.960 --> 00:03:24.320
So let's start with our BaseTicketRequest.

00:03:24.320 --> 00:03:26.360
Let's copy and paste that.

00:03:26.360 --> 00:03:31.919
And really, the only thing that we need to address is the mapped attributes.

00:03:31.919 --> 00:03:34.199
Because of course, we have different attributes here.

00:03:34.199 --> 00:03:41.440
So we're going to have the Name attribute, the Email attribute, the IsManager attribute,

00:03:41.440 --> 00:03:43.720
and then the Password attribute.

00:03:43.720 --> 00:03:47.279
And of course, we have other things, but we'll just leave it as those.

00:03:47.279 --> 00:03:56.080
And of course, those are going to map to the Name, Email, IsManager, but this is an underscore,

00:03:56.080 --> 00:03:57.240
and then Password.

00:03:57.240 --> 00:04:00.559
But one thing that we need to be aware of here is that the passwords that come from

00:04:00.559 --> 00:04:03.360
the client are going to be in plain text.

00:04:03.360 --> 00:04:08.360
Because the client isn't going to have, well, whatever we need to store in the database.

00:04:08.360 --> 00:04:12.080
So they're not going to have our hashing algorithm or anything like that.

00:04:12.080 --> 00:04:14.320
And we don't want the client to have that.

00:04:14.320 --> 00:04:20.000
Besides, if this were just a normal web form, that form would be submitting the password

00:04:20.000 --> 00:04:21.200
in plain text.

00:04:21.200 --> 00:04:24.399
So the client is going to send the password in plain text.

00:04:24.399 --> 00:04:29.119
We then need to be sure that we hash that before we store it in the database.

00:04:29.119 --> 00:04:35.160
So we are going to, inside of our ForEach loop, if we have that given key, we are going

00:04:35.160 --> 00:04:38.959
to get the input value here for that key.

00:04:38.959 --> 00:04:46.459
And then we are going to check if the attribute is equal to password, then we want to becrypt

00:04:46.459 --> 00:04:47.600
that value.

00:04:47.600 --> 00:04:54.119
And then we will set that value to the appropriate attribute in our AttributesToUpdate.

00:04:54.119 --> 00:05:01.160
So that way, regardless of what request is made, we be sure that we hash that password.

00:05:01.160 --> 00:05:02.359
So that should be it.

00:05:02.359 --> 00:05:07.200
We don't need this messages method anymore because we don't have any special message

00:05:07.320 --> 00:05:09.239
for any of our fields.

00:05:09.239 --> 00:05:10.239
And that's good.

00:05:10.239 --> 00:05:13.160
So we are done with BaseUserRequest.

00:05:13.160 --> 00:05:16.600
Let's take a look at our ReplaceUserRequest.

00:05:16.600 --> 00:05:24.200
So let's copy our ReplaceTicketRequest, change the name of the file to ReplaceUserRequest.

00:05:24.200 --> 00:05:26.760
And here are attributes.

00:05:26.760 --> 00:05:31.279
If we are replacing a user, they are all going to be required.

00:05:31.279 --> 00:05:32.480
Did I change the name of that?

00:05:32.480 --> 00:05:33.480
Nope.

00:05:33.480 --> 00:05:35.600
Don't forget to change the name of the classes as well.

00:05:35.600 --> 00:05:39.880
So BaseUserRequest and then ReplaceUserRequest.

00:05:39.880 --> 00:05:43.000
So we want to return true for Authorize here.

00:05:43.000 --> 00:05:50.119
Our attributes, once again, are name, email, isManager, and then we had the password.

00:05:50.119 --> 00:05:54.160
And these are going to be relatively simple as far as what we need.

00:05:54.160 --> 00:05:58.880
So everything is required, name, and well name is a string, email is a string, but we

00:05:58.880 --> 00:06:04.380
can use the email validation, isManager will be a boolean value, and then password will

00:06:04.380 --> 00:06:05.380
be a string.

00:06:06.160 --> 00:06:07.160
So that's going to be good.

00:06:07.160 --> 00:06:08.160
Yeah.

00:06:08.160 --> 00:06:09.160
I think we're good here.

00:06:09.160 --> 00:06:13.959
And in fact, we can take these rules and we can use those to update the StoreUserRequest.

00:06:13.959 --> 00:06:19.559
We need to return true for the Authorize method and then our rules because the rules for creating

00:06:19.559 --> 00:06:22.859
a user is going to be the same as replacing a user.

00:06:22.859 --> 00:06:24.940
So we can just return those.

00:06:24.940 --> 00:06:29.260
And let's see, we need to inherit the BaseUserRequest.

00:06:29.260 --> 00:06:35.079
Let's go back to ReplaceUserRequest, make sure that we inherit the correct request

00:06:35.779 --> 00:06:36.779
class.

00:06:36.779 --> 00:06:38.480
And yep, we are good there.

00:06:38.480 --> 00:06:41.380
So now we just have the update.

00:06:41.380 --> 00:06:46.540
And the update request is going to be very similar, except that everything is going to

00:06:46.540 --> 00:06:48.019
be sometimes.

00:06:48.019 --> 00:06:50.019
So let's go to UpdateUserRequest.

00:06:50.019 --> 00:06:55.179
We need to inherit the BaseUserRequest, we need to return true for the Authorize method,

00:06:55.179 --> 00:07:01.380
and then we will simply change these rules from required to sometimes.

00:07:01.380 --> 00:07:04.760
And we'll be good as far as our requests are concerned.

00:07:04.760 --> 00:07:09.839
So now, instead of our UserController, we need a use statement for our UserPolicy.

00:07:09.839 --> 00:07:15.679
Our Index method is going to be what it was before, to where we call user, then filter,

00:07:15.679 --> 00:07:19.519
pass in our filters, and then we want to paginate.

00:07:19.519 --> 00:07:23.040
And that's going to be good as far as our index is concerned.

00:07:23.040 --> 00:07:27.799
You know, we have the Author filter here, and we might want to either change that to

00:07:27.799 --> 00:07:31.119
UserFilter or create a UserFilter.

00:07:31.119 --> 00:07:35.920
But I think for the sake of this process, we can leave it as AuthorFilter because really

00:07:35.920 --> 00:07:37.519
they're going to be one in the same.

00:07:37.519 --> 00:07:40.079
And that's just something else that you have to see me type out.

00:07:40.079 --> 00:07:41.600
So I'm going to be lazy.

00:07:41.600 --> 00:07:43.959
I'm going to use the AuthorFilter here.

00:07:43.959 --> 00:07:46.480
And so next we have the Store method.

00:07:46.480 --> 00:07:49.720
Now let's open up the TicketController.

00:07:49.720 --> 00:07:54.600
Because a lot of this functionality is going to be the same, we just need to modify it

00:07:54.600 --> 00:07:58.079
to work with our users instead of our tickets.

00:07:58.079 --> 00:08:03.000
So let's copy the code from our Store method, and let's paste that inside of the Store method

00:08:03.000 --> 00:08:04.760
for the UserController.

00:08:04.760 --> 00:08:06.720
We of course need to make some changes here.

00:08:06.720 --> 00:08:10.920
So instead of working with the Ticket class, we're working with the User class.

00:08:10.920 --> 00:08:16.959
We are going to return a new UserResource, where we create that user passing in mapped

00:08:16.959 --> 00:08:17.959
attributes.

00:08:17.959 --> 00:08:23.339
We've already handled that, so we are good to go as far as that class is concerned.

00:08:23.339 --> 00:08:29.380
We do need the AuthorizationException here so that we can say that you are not authorized.

00:08:29.380 --> 00:08:32.739
We don't want to update to create that resource.

00:08:32.739 --> 00:08:34.659
So that should be fine there.

00:08:34.659 --> 00:08:39.979
And while I'm thinking about it, we do need to modify our UserResource because now we

00:08:39.979 --> 00:08:42.780
have the IsManager.

00:08:42.780 --> 00:08:45.059
So let's do this.

00:08:45.059 --> 00:08:50.179
We'll have IsManager, and that will be the IsManager.

00:08:50.179 --> 00:08:52.859
So that should get that value in.

00:08:52.979 --> 00:08:56.179
We have our Show method, which everything's okay there.

00:08:56.179 --> 00:09:00.020
I want to change that parameter to User, and that'll be fine.

00:09:00.020 --> 00:09:01.659
Then we have the Update method.

00:09:01.659 --> 00:09:05.500
So let's once again go to our TicketController.

00:09:05.500 --> 00:09:07.340
Let's get the Update method.

00:09:07.340 --> 00:09:10.900
Let's copy that and paste it inside of our UserController.

00:09:10.900 --> 00:09:17.640
So here we are going to be working with our UserID, and we are going to find our fail

00:09:17.640 --> 00:09:18.900
on our UserModel.

00:09:18.900 --> 00:09:25.260
We're going to store that in a User variable, which we can then update all of these other

00:09:25.260 --> 00:09:26.520
variable names.

00:09:26.520 --> 00:09:28.239
We check if we can update the user.

00:09:28.239 --> 00:09:29.619
We update the user.

00:09:29.619 --> 00:09:36.340
Then we return the UserResource, and we need the ModelNotFoundException being brought in.

00:09:36.340 --> 00:09:39.500
Otherwise, you're not authorized to update that resource.

00:09:39.500 --> 00:09:40.500
That's good.

00:09:40.500 --> 00:09:42.700
So now we need the Replace method.

00:09:42.700 --> 00:09:46.900
Let's just whole copy and paste the Replace method.

00:09:47.500 --> 00:09:52.299
Of course, this is going to be a ReplaceUser request.

00:09:52.299 --> 00:09:59.059
We'll get the UserID, which we will then, once again, call findOrFail on our UserModel.

00:09:59.059 --> 00:10:02.739
We'll just change the Ticket variable names to User.

00:10:02.739 --> 00:10:09.020
We want to return a new UserResource, and if that's not found, we'll say User cannot

00:10:09.020 --> 00:10:10.020
be found.

00:10:10.020 --> 00:10:12.460
Then we just have the Destroy method.

00:10:12.460 --> 00:10:14.179
So once again, copy and paste.

00:10:14.619 --> 00:10:16.900
We could type all of this out, but why?

00:10:16.900 --> 00:10:18.580
Why would we do that?

00:10:18.580 --> 00:10:21.900
So here we will have our UserID.

00:10:21.900 --> 00:10:29.500
We'll try to find the user with that ID, and we'll just change these variables to User.

00:10:29.500 --> 00:10:30.500
Delete it.

00:10:30.500 --> 00:10:32.260
We'll say that the user successfully deleted it.

00:10:32.260 --> 00:10:34.859
Otherwise, we'll say the user cannot be found.

00:10:34.859 --> 00:10:39.299
So that was a lot of copy, pasting, and replacing.

00:10:39.299 --> 00:10:42.780
So I'm going to just go through these.

00:10:42.820 --> 00:10:44.380
Everything looks okay.

00:10:44.380 --> 00:10:49.419
So I think the only other thing that we need to do is set up our routes.

00:10:49.419 --> 00:10:53.099
So let's go to our V1 API routes.

00:10:53.099 --> 00:10:57.500
Let's copy what we have for the tickets, because that's going to be the most straightforward

00:10:57.500 --> 00:10:58.820
thing that we can do.

00:10:58.820 --> 00:11:04.859
So let's change Tickets to Users, then we will change Ticket to User, and then finally

00:11:04.859 --> 00:11:10.780
we will change these controller classes to UserControllerClass.

00:11:11.260 --> 00:11:14.460
Yep, that automatically sets up the replace and update.

00:11:14.460 --> 00:11:15.460
You know what?

00:11:15.460 --> 00:11:20.979
Since we're here, let's modify our authors, because we aren't going to be storing or deleting

00:11:20.979 --> 00:11:22.700
or any authors.

00:11:22.700 --> 00:11:29.780
Let's go ahead and let's call Accept here, and then we will say Accept, Store, Update,

00:11:29.780 --> 00:11:31.020
and Delete.

00:11:31.020 --> 00:11:32.820
And that should be good.

00:11:32.820 --> 00:11:35.900
Okay, so we have our UserController.

00:11:35.900 --> 00:11:38.419
We have all of our user requests.

00:11:38.419 --> 00:11:40.299
We updated our user resource.

00:11:40.299 --> 00:11:41.859
We have our user policy.

00:11:41.859 --> 00:11:44.979
Oh, we need to set up the user policy.

00:11:44.979 --> 00:11:48.859
We need to register that inside of OfficeServiceProvider.

00:11:48.859 --> 00:11:50.739
So let's do that.

00:11:50.739 --> 00:11:52.940
And you know what I should have done here?

00:11:52.940 --> 00:11:58.780
User class, and then I should have done it like this, to where we had App, and then Policies,

00:11:58.780 --> 00:12:02.099
and then V1, and then UserPolicy.

00:12:02.099 --> 00:12:05.059
So let's just copy that.

00:12:05.059 --> 00:12:07.260
Let's use that for the ticket.

00:12:07.260 --> 00:12:10.140
We don't necessarily need to do that for our model.

00:12:10.140 --> 00:12:15.940
Okay, so now we have Controller, we have request classes, we have the resource updated,

00:12:15.940 --> 00:12:20.900
we have our policy, we have the AuthServiceProvider set up, and we have our routes.

00:12:20.900 --> 00:12:27.340
So now we just need to go and test these things, and inside of Postman, I've already set up

00:12:27.340 --> 00:12:28.460
those routes.

00:12:28.460 --> 00:12:30.140
So I reordered things a little bit.

00:12:30.140 --> 00:12:34.140
I renamed the old Users to Authors, and I put everything there.

00:12:34.140 --> 00:12:39.580
But then I created a Users collection, and I have these already set up to go.

00:12:39.580 --> 00:12:42.940
So let's start by sending our request.

00:12:42.940 --> 00:12:48.140
To get our users, we should get, yep, we get our response.

00:12:48.140 --> 00:12:49.859
Manager is zero.

00:12:49.859 --> 00:12:51.659
I guess that's fine.

00:12:51.659 --> 00:12:55.400
Let's get a user with an ID of one.

00:12:55.400 --> 00:12:59.059
That should get us our Solon Grimes, so we're good there.

00:12:59.059 --> 00:13:01.380
So let's create a user with a POST request.

00:13:01.380 --> 00:13:04.900
I already have this filled out, name, email, password, and isManager.

00:13:04.900 --> 00:13:06.460
We will submit that.

00:13:06.500 --> 00:13:10.179
And we get a new user with an ID of 15.

00:13:10.179 --> 00:13:14.099
And we have name, email, isManager, and that's great.

00:13:14.099 --> 00:13:17.260
Password is not included because we didn't want that included.

00:13:17.260 --> 00:13:18.979
So we are good to go there.

00:13:18.979 --> 00:13:21.179
Let's try to update that user.

00:13:21.179 --> 00:13:25.020
So let's change the URL here to user15.

00:13:25.020 --> 00:13:31.780
And we're going to change the name to myUser's new name, and we're going to make them a manager.

00:13:31.780 --> 00:13:33.859
So we will submit that.

00:13:33.859 --> 00:13:38.299
And let's see, argument two, ticket, must be of type ticket.

00:13:38.299 --> 00:13:39.940
That's inside of our policy.

00:13:39.940 --> 00:13:46.059
And yep, because all of these second arguments are tickets, that's easy enough to change.

00:13:46.059 --> 00:13:52.840
So we will simply change those to users, and let's change the parameter to model.

00:13:52.840 --> 00:13:56.940
So we'll find all of these other tickets, which will become users.

00:13:56.940 --> 00:14:00.780
The tickets will then be model, and we're good to go there.

00:14:00.780 --> 00:14:02.580
So let's submit that.

00:14:02.580 --> 00:14:05.140
We can see that the user is indeed updated.

00:14:05.140 --> 00:14:08.299
However, isManager is false.

00:14:08.299 --> 00:14:10.179
Why is that?

00:14:10.179 --> 00:14:12.700
The mapping should be fine.

00:14:12.700 --> 00:14:15.820
Let's go to the base user request.

00:14:15.820 --> 00:14:21.179
Mapping, yes, isManager is isManager.

00:14:21.179 --> 00:14:25.099
Okay, so the only other thing, is it fillable?

00:14:25.099 --> 00:14:26.140
Nope.

00:14:26.140 --> 00:14:26.979
So that's the problem.

00:14:26.979 --> 00:14:28.140
We need to come here.

00:14:28.140 --> 00:14:30.659
We need to add the isManager to fillable.

00:14:30.700 --> 00:14:34.700
And something else I'm going to do is change the casts here.

00:14:34.700 --> 00:14:41.619
Because, you know, the response was returning zero or one based upon if the user was a manager,

00:14:41.619 --> 00:14:42.460
and I don't want that.

00:14:42.460 --> 00:14:44.460
I want that to be true or false.

00:14:44.460 --> 00:14:49.460
So what we'll do here then is just say isManager is boolean.

00:14:49.460 --> 00:14:51.059
Okay, so that should fix that.

00:14:51.059 --> 00:14:53.020
So now we can submit this.

00:14:53.020 --> 00:14:58.299
We see now the user is a manager, and the value for that is true.

00:14:58.299 --> 00:15:01.099
So let's change that all back.

00:15:01.099 --> 00:15:06.739
So we're going to change its name, and that user is going to be not a manager.

00:15:06.739 --> 00:15:12.340
So whenever we submit that, all of those changes we made with the patch request are replaced.

00:15:12.340 --> 00:15:14.820
And then finally, let's delete the user.

00:15:14.820 --> 00:15:17.619
So we will send that request.

00:15:17.619 --> 00:15:19.580
The user is successfully deleted.

00:15:19.580 --> 00:15:26.140
If we try to submit a request to retrieve that user, we see that the model does not exist.

00:15:26.140 --> 00:15:28.659
So there we have our user controller.

00:15:28.659 --> 00:15:34.140
We can now manage our users as long as we are signed in as a manager.

00:15:34.140 --> 00:15:37.820
Now, you might be thinking, well, what about user registration?

00:15:37.820 --> 00:15:41.020
Shouldn't a user be able to register an account?

00:15:41.020 --> 00:15:44.179
And to that, maybe, maybe not.

00:15:44.179 --> 00:15:46.099
It depends upon the application.

00:15:46.099 --> 00:15:54.900
Because I can tell you from my experience, the applications that I have written for a client have been specific for that client.

00:15:54.900 --> 00:15:58.780
They want to be able to add the users as they see fit.

00:15:58.780 --> 00:16:02.340
And I would imagine in the vast majority of applications that we write,

00:16:02.340 --> 00:16:05.299
especially if we are writing them for a specific client,

00:16:05.299 --> 00:16:09.380
or if we are writing a product to make available to multiple clients,

00:16:09.380 --> 00:16:12.340
that they would want that ability themselves.

00:16:12.340 --> 00:16:16.140
They wouldn't want anyone to just create an account willy-nilly.

00:16:16.140 --> 00:16:20.940
So I'm fine with this approach, letting managers manage those users.

00:16:20.940 --> 00:16:24.739
And so now we are mostly done with our API.

00:16:24.739 --> 00:16:26.539
Most of the functionality is there.

00:16:26.539 --> 00:16:30.140
There are, however, some things that I want to talk about.

00:16:30.140 --> 00:16:34.900
Things like documentation, permissions, and just some other things,

00:16:34.900 --> 00:16:37.539
which we will discuss starting in the next episode.

